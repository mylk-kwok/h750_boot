
H750_BOOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006750  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af4  08006af4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006afc  08006afc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006afc  08006afc  00016afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  24000074  08006b78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000184  08006b78  00020184  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8e7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000312b  00000000  00000000  0003b989  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  0003eab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  0003f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037eb1  00000000  00000000  000403a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cefb  00000000  00000000  00078251  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00159dd2  00000000  00000000  0008514c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001def1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b40  00000000  00000000  001def9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080069d8 	.word	0x080069d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080069d8 	.word	0x080069d8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <boot_entry>:
#define APPLICATION_ADDRESS  (uint32_t)0x90000000
typedef void (*pFunction)(void);
pFunction JumpToApplication;

int boot_entry(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	int res;

	W25QXX_Init();
 8000686:	f000 fc60 	bl	8000f4a <W25QXX_Init>
	res = W25QXX_MftrDeviceID();
 800068a:	f000 fe03 	bl	8001294 <W25QXX_MftrDeviceID>
 800068e:	4603      	mov	r3, r0
 8000690:	607b      	str	r3, [r7, #4]
	printf("the id of w25qxx is 0x%x.\r\n",res);
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <boot_entry+0x4c>)
 8000696:	f005 fa57 	bl	8005b48 <iprintf>
	W25Q_Memory_Mapped_Enable();
 800069a:	f000 feab 	bl	80013f4 <W25Q_Memory_Mapped_Enable>

    JumpToApplication = (pFunction)(*(__IO uint32_t *)(APPLICATION_ADDRESS + 4));
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <boot_entry+0x50>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <boot_entry+0x54>)
 80006a6:	601a      	str	r2, [r3, #0]
    __set_MSP(*(__IO uint32_t *)APPLICATION_ADDRESS);
 80006a8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	f383 8808 	msr	MSP, r3

    printf("jump to application!\r\n");
 80006b6:	4808      	ldr	r0, [pc, #32]	; (80006d8 <boot_entry+0x58>)
 80006b8:	f005 faba 	bl	8005c30 <puts>
    JumpToApplication();
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <boot_entry+0x54>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4798      	blx	r3

	return res;
 80006c2:	687b      	ldr	r3, [r7, #4]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	080069f0 	.word	0x080069f0
 80006d0:	90000004 	.word	0x90000004
 80006d4:	240000a0 	.word	0x240000a0
 80006d8:	08006a0c 	.word	0x08006a0c

080006dc <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0xa8>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e8:	4a26      	ldr	r2, [pc, #152]	; (8000784 <MX_GPIO_Init+0xa8>)
 80006ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xa8>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <MX_GPIO_Init+0xa8>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_GPIO_Init+0xa8>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_GPIO_Init+0xa8>)
 8000726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0xa8>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_GPIO_Init+0xa8>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000742:	4a10      	ldr	r2, [pc, #64]	; (8000784 <MX_GPIO_Init+0xa8>)
 8000744:	f043 0320 	orr.w	r3, r3, #32
 8000748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_GPIO_Init+0xa8>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_GPIO_Init+0xa8>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	4a08      	ldr	r2, [pc, #32]	; (8000784 <MX_GPIO_Init+0xa8>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_GPIO_Init+0xa8>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

}
 8000778:	bf00      	nop
 800077a:	371c      	adds	r7, #28
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	58024400 	.word	0x58024400

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f000 fe5e 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f80a 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000798:	f000 f8d6 	bl	8000948 <MX_QUADSPI_Init>
  MX_UART4_Init();
 800079c:	f000 faf4 	bl	8000d88 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  boot_entry();
 80007a0:	f7ff ff6e 	bl	8000680 <boot_entry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <main+0x1c>
	...

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0cc      	sub	sp, #304	; 0x130
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007b2:	224c      	movs	r2, #76	; 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f005 f9be 	bl	8005b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007c0:	2220      	movs	r2, #32
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 f9b7 	bl	8005b38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4618      	mov	r0, r3
 80007d0:	23bc      	movs	r3, #188	; 0xbc
 80007d2:	461a      	mov	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f005 f9af 	bl	8005b38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007da:	2002      	movs	r0, #2
 80007dc:	f001 f968 	bl	8001ab0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	4b48      	ldr	r3, [pc, #288]	; (8000908 <SystemClock_Config+0x160>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a47      	ldr	r2, [pc, #284]	; (8000908 <SystemClock_Config+0x160>)
 80007ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b45      	ldr	r3, [pc, #276]	; (8000908 <SystemClock_Config+0x160>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	4b43      	ldr	r3, [pc, #268]	; (800090c <SystemClock_Config+0x164>)
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	4a42      	ldr	r2, [pc, #264]	; (800090c <SystemClock_Config+0x164>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	62d3      	str	r3, [r2, #44]	; 0x2c
 800080a:	4b40      	ldr	r3, [pc, #256]	; (800090c <SystemClock_Config+0x164>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	f003 0201 	and.w	r2, r3, #1
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081a:	bf00      	nop
 800081c:	4b3a      	ldr	r3, [pc, #232]	; (8000908 <SystemClock_Config+0x160>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000828:	d1f8      	bne.n	800081c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082a:	2301      	movs	r3, #1
 800082c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	2302      	movs	r3, #2
 8000840:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000844:	2305      	movs	r3, #5
 8000846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800084a:	23c0      	movs	r3, #192	; 0xc0
 800084c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000862:	2308      	movs	r3, #8
 8000864:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fd81 	bl	8002380 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000884:	f000 f858 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	233f      	movs	r3, #63	; 0x3f
 800088a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800089a:	2308      	movs	r3, #8
 800089c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b4:	2340      	movs	r3, #64	; 0x40
 80008b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008be:	2104      	movs	r1, #4
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 f96d 	bl	8002ba0 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80008cc:	f000 f834 	bl	8000938 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_QSPI;
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <SystemClock_Config+0x168>)
 80008d6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2200      	movs	r2, #0
 80008de:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fcdb 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x154>
  {
    Error_Handler();
 80008f8:	f000 f81e 	bl	8000938 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	58024800 	.word	0x58024800
 800090c:	58000400 	.word	0x58000400
 8000910:	02000002 	.word	0x02000002

08000914 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800091c:	1d39      	adds	r1, r7, #4
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	2201      	movs	r2, #1
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <__io_putchar+0x20>)
 8000926:	f004 f80f 	bl	8004948 <HAL_UART_Transmit>
	return ch;
 800092a:	687b      	ldr	r3, [r7, #4]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	240000f0 	.word	0x240000f0

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_QUADSPI_Init+0x50>)
 800094e:	4a13      	ldr	r2, [pc, #76]	; (800099c <MX_QUADSPI_Init+0x54>)
 8000950:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_QUADSPI_Init+0x50>)
 8000954:	2201      	movs	r2, #1
 8000956:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_QUADSPI_Init+0x50>)
 800095a:	2204      	movs	r2, #4
 800095c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_QUADSPI_Init+0x50>)
 8000960:	2210      	movs	r2, #16
 8000962:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_QUADSPI_Init+0x50>)
 8000966:	2216      	movs	r2, #22
 8000968:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_QUADSPI_Init+0x50>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_QUADSPI_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_QUADSPI_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_QUADSPI_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_QUADSPI_Init+0x50>)
 8000986:	f001 f8cd 	bl	8001b24 <HAL_QSPI_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000990:	f7ff ffd2 	bl	8000938 <Error_Handler>
  }

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	240000a4 	.word	0x240000a4
 800099c:	52005000 	.word	0x52005000

080009a0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a32      	ldr	r2, [pc, #200]	; (8000a88 <HAL_QSPI_MspInit+0xe8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d15e      	bne.n	8000a80 <HAL_QSPI_MspInit+0xe0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80009c2:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <HAL_QSPI_MspInit+0xec>)
 80009c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009c8:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <HAL_QSPI_MspInit+0xec>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <HAL_QSPI_MspInit+0xec>)
 80009d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <HAL_QSPI_MspInit+0xec>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	4a29      	ldr	r2, [pc, #164]	; (8000a8c <HAL_QSPI_MspInit+0xec>)
 80009e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <HAL_QSPI_MspInit+0xec>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <HAL_QSPI_MspInit+0xec>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <HAL_QSPI_MspInit+0xec>)
 8000a06:	f043 0320 	orr.w	r3, r3, #32
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <HAL_QSPI_MspInit+0xec>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	f003 0320 	and.w	r3, r3, #32
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF8     ------> QUADSPI_BK1_IO0
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <HAL_QSPI_MspInit+0xf0>)
 8000a38:	f000 fe8a 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000a3c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a4e:	2309      	movs	r3, #9
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480e      	ldr	r0, [pc, #56]	; (8000a94 <HAL_QSPI_MspInit+0xf4>)
 8000a5a:	f000 fe79 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a70:	230a      	movs	r3, #10
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <HAL_QSPI_MspInit+0xf4>)
 8000a7c:	f000 fe68 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	52005000 	.word	0x52005000
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	58021800 	.word	0x58021800
 8000a94:	58021400 	.word	0x58021400

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_MspInit+0x30>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa4:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x30>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x30>)
 8000ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	58024400 	.word	0x58024400

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 fd06 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e00a      	b.n	8000b50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b3a:	f3af 8000 	nop.w
 8000b3e:	4601      	mov	r1, r0
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf0      	blt.n	8000b3a <_read+0x12>
	}

return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e009      	b.n	8000b88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fec9 	bl	8000914 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf1      	blt.n	8000b74 <_write+0x12>
	}
	return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_close>:

int _close(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_isatty>:

int _isatty(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d207      	bcs.n	8000c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c34:	f004 ff56 	bl	8005ae4 <__errno>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	24080000 	.word	0x24080000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	24000090 	.word	0x24000090
 8000c6c:	24000188 	.word	0x24000188

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c74:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <SystemInit+0xec>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a38      	ldr	r2, [pc, #224]	; (8000d5c <SystemInit+0xec>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <SystemInit+0xf0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 030f 	and.w	r3, r3, #15
 8000c8c:	2b06      	cmp	r3, #6
 8000c8e:	d807      	bhi.n	8000ca0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c90:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <SystemInit+0xf0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f023 030f 	bic.w	r3, r3, #15
 8000c98:	4a31      	ldr	r2, [pc, #196]	; (8000d60 <SystemInit+0xf0>)
 8000c9a:	f043 0307 	orr.w	r3, r3, #7
 8000c9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ca0:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <SystemInit+0xf4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <SystemInit+0xf4>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <SystemInit+0xf4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <SystemInit+0xf4>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	492b      	ldr	r1, [pc, #172]	; (8000d64 <SystemInit+0xf4>)
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <SystemInit+0xf8>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <SystemInit+0xf0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	2b07      	cmp	r3, #7
 8000cc8:	d907      	bls.n	8000cda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <SystemInit+0xf0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 030f 	bic.w	r3, r3, #15
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <SystemInit+0xf0>)
 8000cd4:	f043 0307 	orr.w	r3, r3, #7
 8000cd8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <SystemInit+0xf4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <SystemInit+0xf4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <SystemInit+0xf4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <SystemInit+0xf4>)
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <SystemInit+0xfc>)
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <SystemInit+0xf4>)
 8000cf4:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <SystemInit+0x100>)
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <SystemInit+0xf4>)
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <SystemInit+0x104>)
 8000cfc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <SystemInit+0xf4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <SystemInit+0xf4>)
 8000d06:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <SystemInit+0x104>)
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <SystemInit+0xf4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <SystemInit+0xf4>)
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <SystemInit+0x104>)
 8000d14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <SystemInit+0xf4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <SystemInit+0xf4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <SystemInit+0xf4>)
 8000d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <SystemInit+0xf4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <SystemInit+0x108>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <SystemInit+0x10c>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d3a:	d202      	bcs.n	8000d42 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <SystemInit+0x110>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <SystemInit+0x114>)
 8000d44:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d48:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SystemInit+0xec>)
 8000d4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d50:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	52002000 	.word	0x52002000
 8000d64:	58024400 	.word	0x58024400
 8000d68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d6c:	02020200 	.word	0x02020200
 8000d70:	01ff0000 	.word	0x01ff0000
 8000d74:	01010280 	.word	0x01010280
 8000d78:	5c001000 	.word	0x5c001000
 8000d7c:	ffff0000 	.word	0xffff0000
 8000d80:	51008108 	.word	0x51008108
 8000d84:	52004000 	.word	0x52004000

08000d88 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <MX_UART4_Init+0x90>)
 8000d8e:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <MX_UART4_Init+0x94>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <MX_UART4_Init+0x90>)
 8000d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <MX_UART4_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_UART4_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <MX_UART4_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_UART4_Init+0x90>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_UART4_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MX_UART4_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_UART4_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_UART4_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_UART4_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dd0:	4811      	ldr	r0, [pc, #68]	; (8000e18 <MX_UART4_Init+0x90>)
 8000dd2:	f003 fd69 	bl	80048a8 <HAL_UART_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ddc:	f7ff fdac 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de0:	2100      	movs	r1, #0
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_UART4_Init+0x90>)
 8000de4:	f004 fd99 	bl	800591a <HAL_UARTEx_SetTxFifoThreshold>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000dee:	f7ff fda3 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4808      	ldr	r0, [pc, #32]	; (8000e18 <MX_UART4_Init+0x90>)
 8000df6:	f004 fdce 	bl	8005996 <HAL_UARTEx_SetRxFifoThreshold>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e00:	f7ff fd9a 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_UART4_Init+0x90>)
 8000e06:	f004 fd4f 	bl	80058a8 <HAL_UARTEx_DisableFifoMode>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e10:	f7ff fd92 	bl	8000938 <Error_Handler>
  }

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	240000f0 	.word	0x240000f0
 8000e1c:	40004c00 	.word	0x40004c00

08000e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <HAL_UART_MspInit+0xc8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d14d      	bne.n	8000ede <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HAL_UART_MspInit+0xcc>)
 8000e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e48:	4a28      	ldr	r2, [pc, #160]	; (8000eec <HAL_UART_MspInit+0xcc>)
 8000e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_UART_MspInit+0xcc>)
 8000e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_UART_MspInit+0xcc>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	4a21      	ldr	r2, [pc, #132]	; (8000eec <HAL_UART_MspInit+0xcc>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_UART_MspInit+0xcc>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_UART_MspInit+0xcc>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_UART_MspInit+0xcc>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_UART_MspInit+0xcc>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <HAL_UART_MspInit+0xd0>)
 8000eba:	f000 fc49 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <HAL_UART_MspInit+0xd4>)
 8000eda:	f000 fc39 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004c00 	.word	0x40004c00
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58022000 	.word	0x58022000
 8000ef4:	58020000 	.word	0x58020000

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000efc:	f7ff feb8 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f02:	e003      	b.n	8000f0c <LoopCopyDataInit>

08000f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f0a:	3104      	adds	r1, #4

08000f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f14:	d3f6      	bcc.n	8000f04 <CopyDataInit>
  ldr  r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000f18:	e002      	b.n	8000f20 <LoopFillZerobss>

08000f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f1c:	f842 3b04 	str.w	r3, [r2], #4

08000f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f24:	d3f9      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f26:	f004 fde3 	bl	8005af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fc2d 	bl	8000788 <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000f34:	08006b04 	.word	0x08006b04
  ldr  r0, =_sdata
 8000f38:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000f3c:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8000f40:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8000f44:	24000184 	.word	0x24000184

08000f48 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC3_IRQHandler>

08000f4a <W25QXX_Init>:
uint8_t w25qxx_buf[4096];
uint16_t w25qxx_mid = W25Q128;    //the variable is only called externally


void W25QXX_Init(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
    W25QXX_ExitQPIMode();
 8000f4e:	f000 f807 	bl	8000f60 <W25QXX_ExitQPIMode>
    W25QXX_Reset();
 8000f52:	f000 fa0b 	bl	800136c <W25QXX_Reset>
    W25QXX_EnterQPIMode();
 8000f56:	f000 f835 	bl	8000fc4 <W25QXX_EnterQPIMode>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <W25QXX_ExitQPIMode>:


void W25QXX_ExitQPIMode(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef cmd;

    cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000f66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6a:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = W25X_ExitQPIMode;
 8000f6c:	23ff      	movs	r3, #255	; 0xff
 8000f6e:	603b      	str	r3, [r7, #0]

    cmd.AddressMode = QSPI_ADDRESS_NONE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	60fb      	str	r3, [r7, #12]
    cmd.Address = 0x00;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]

    cmd.DataMode = QSPI_DATA_NONE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.NbData = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesSize = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
    cmd.AlternateBytes = 0x00;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]

    cmd.DummyCycles = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34

    HAL_QSPI_Command(&hqspi, &cmd, 100);
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2264      	movs	r2, #100	; 0x64
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <W25QXX_ExitQPIMode+0x5c>)
 8000faa:	f000 fe2f 	bl	8001c0c <HAL_QSPI_Command>

    w25qxx_mode = W25QXX_MODE_SPI;
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <W25QXX_ExitQPIMode+0x60>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	3738      	adds	r7, #56	; 0x38
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	240000a4 	.word	0x240000a4
 8000fc0:	24000094 	.word	0x24000094

08000fc4 <W25QXX_EnterQPIMode>:


void W25QXX_EnterQPIMode(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b090      	sub	sp, #64	; 0x40
 8000fc8:	af00      	add	r7, sp, #0
    uint8_t dat;

    QSPI_CommandTypeDef cmd;

    dat = W25QXX_ReadSR(2);
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f000 f868 	bl	80010a0 <W25QXX_ReadSR>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if ((dat & QE_MASK) == 0x00)
 8000fd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10f      	bne.n	8001002 <W25QXX_EnterQPIMode+0x3e>
    {
        W25QXX_WriteEnable(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f000 f916 	bl	8001214 <W25QXX_WriteEnable>
        dat |= QE_MASK;
 8000fe8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        W25QXX_WriteSR(2, dat);
 8000ff6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f000 f8ad 	bl	800115c <W25QXX_WriteSR>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001006:	61fb      	str	r3, [r7, #28]
    cmd.Instruction = W25X_EnterQPIMode;
 8001008:	2338      	movs	r3, #56	; 0x38
 800100a:	607b      	str	r3, [r7, #4]

    cmd.AddressMode = QSPI_ADDRESS_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
    cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 8001010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001014:	613b      	str	r3, [r7, #16]
    cmd.Address = 0x00;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]

    cmd.DataMode = QSPI_DATA_NONE;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.NbData = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.AlternateBytesSize = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
    cmd.AlternateBytes = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]

    cmd.DummyCycles = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800103a:	2300      	movs	r3, #0
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38

    HAL_QSPI_Command(&hqspi, &cmd, 100);
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2264      	movs	r2, #100	; 0x64
 8001042:	4619      	mov	r1, r3
 8001044:	4814      	ldr	r0, [pc, #80]	; (8001098 <W25QXX_EnterQPIMode+0xd4>)
 8001046:	f000 fde1 	bl	8001c0c <HAL_QSPI_Command>

    w25qxx_mode = W25QXX_MODE_QPI;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <W25QXX_EnterQPIMode+0xd8>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]

    cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001050:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001054:	61fb      	str	r3, [r7, #28]
    cmd.Instruction = W25X_SetReadParameters;
 8001056:	23c0      	movs	r3, #192	; 0xc0
 8001058:	607b      	str	r3, [r7, #4]
    cmd.DataMode = QSPI_DATA_4_LINES;
 800105a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.NbData = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    dat = 0x03 << 4;
 8001064:	2330      	movs	r3, #48	; 0x30
 8001066:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    W25QXX_WriteEnable(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f000 f8d2 	bl	8001214 <W25QXX_WriteEnable>
    if (HAL_QSPI_Command(&hqspi, &cmd, 100) == HAL_OK)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2264      	movs	r2, #100	; 0x64
 8001074:	4619      	mov	r1, r3
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <W25QXX_EnterQPIMode+0xd4>)
 8001078:	f000 fdc8 	bl	8001c0c <HAL_QSPI_Command>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d106      	bne.n	8001090 <W25QXX_EnterQPIMode+0xcc>
    {
        HAL_QSPI_Transmit(&hqspi, &dat, 100);
 8001082:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8001086:	2264      	movs	r2, #100	; 0x64
 8001088:	4619      	mov	r1, r3
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <W25QXX_EnterQPIMode+0xd4>)
 800108c:	f000 fe1c 	bl	8001cc8 <HAL_QSPI_Transmit>
    }
}
 8001090:	bf00      	nop
 8001092:	3740      	adds	r7, #64	; 0x40
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	240000a4 	.word	0x240000a4
 800109c:	24000094 	.word	0x24000094

080010a0 <W25QXX_ReadSR>:


uint8_t W25QXX_ReadSR(uint8_t srx)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b092      	sub	sp, #72	; 0x48
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
    uint8_t dat = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    QSPI_CommandTypeDef cmd;

    if (w25qxx_mode)
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <W25QXX_ReadSR+0xb4>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <W25QXX_ReadSR+0x26>
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80010b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
        cmd.DataMode = QSPI_DATA_4_LINES;
 80010be:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
 80010c4:	e005      	b.n	80010d2 <W25QXX_ReadSR+0x32>
    }
    else
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
        cmd.DataMode = QSPI_DATA_1_LINE;
 80010cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
    }

    cmd.AddressMode = QSPI_ADDRESS_NONE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 80010d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010da:	61bb      	str	r3, [r7, #24]
    cmd.Address = 0x00;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]

    cmd.NbData = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.AlternateBytesSize = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    cmd.AlternateBytes = 0x00;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

    cmd.DummyCycles = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010fc:	2300      	movs	r3, #0
 80010fe:	643b      	str	r3, [r7, #64]	; 0x40

    switch (srx)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d006      	beq.n	8001114 <W25QXX_ReadSR+0x74>
 8001106:	2b03      	cmp	r3, #3
 8001108:	d007      	beq.n	800111a <W25QXX_ReadSR+0x7a>
 800110a:	2b01      	cmp	r3, #1
 800110c:	d108      	bne.n	8001120 <W25QXX_ReadSR+0x80>
    {
    case 1:
        cmd.Instruction = W25X_ReadStatusReg1;
 800110e:	2305      	movs	r3, #5
 8001110:	60fb      	str	r3, [r7, #12]
        break;
 8001112:	e008      	b.n	8001126 <W25QXX_ReadSR+0x86>
    case 2:
        cmd.Instruction = W25X_ReadStatusReg2;
 8001114:	2335      	movs	r3, #53	; 0x35
 8001116:	60fb      	str	r3, [r7, #12]
        break;
 8001118:	e005      	b.n	8001126 <W25QXX_ReadSR+0x86>
    case 3:
        cmd.Instruction = W25X_ReadStatusReg3;
 800111a:	2315      	movs	r3, #21
 800111c:	60fb      	str	r3, [r7, #12]
        break;
 800111e:	e002      	b.n	8001126 <W25QXX_ReadSR+0x86>
    default:
        cmd.Instruction = W25X_ReadStatusReg1;
 8001120:	2305      	movs	r3, #5
 8001122:	60fb      	str	r3, [r7, #12]
        break;
 8001124:	bf00      	nop
    }
    if (HAL_QSPI_Command(&hqspi, &cmd, 100) == HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2264      	movs	r2, #100	; 0x64
 800112c:	4619      	mov	r1, r3
 800112e:	480a      	ldr	r0, [pc, #40]	; (8001158 <W25QXX_ReadSR+0xb8>)
 8001130:	f000 fd6c 	bl	8001c0c <HAL_QSPI_Command>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d106      	bne.n	8001148 <W25QXX_ReadSR+0xa8>
    {
        HAL_QSPI_Receive(&hqspi, &dat, 100);
 800113a:	f107 0347 	add.w	r3, r7, #71	; 0x47
 800113e:	2264      	movs	r2, #100	; 0x64
 8001140:	4619      	mov	r1, r3
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <W25QXX_ReadSR+0xb8>)
 8001144:	f000 fe52 	bl	8001dec <HAL_QSPI_Receive>
    }

    return dat;
 8001148:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800114c:	4618      	mov	r0, r3
 800114e:	3748      	adds	r7, #72	; 0x48
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000094 	.word	0x24000094
 8001158:	240000a4 	.word	0x240000a4

0800115c <W25QXX_WriteSR>:

void W25QXX_WriteSR(uint8_t srx, uint8_t dat)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b090      	sub	sp, #64	; 0x40
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
    QSPI_CommandTypeDef cmd;

    if (w25qxx_mode)
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <W25QXX_WriteSR+0xb0>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <W25QXX_WriteSR+0x26>
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001174:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001178:	623b      	str	r3, [r7, #32]
        cmd.DataMode = QSPI_DATA_4_LINES;
 800117a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001180:	e005      	b.n	800118e <W25QXX_WriteSR+0x32>
    }
    else
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001186:	623b      	str	r3, [r7, #32]
        cmd.DataMode = QSPI_DATA_1_LINE;
 8001188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    cmd.AddressMode = QSPI_ADDRESS_NONE;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 8001192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001196:	617b      	str	r3, [r7, #20]
    cmd.Address = 0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]

    cmd.NbData = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	633b      	str	r3, [r7, #48]	; 0x30

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.AlternateBytesSize = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
    cmd.AlternateBytes = 0x00;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]

    cmd.DummyCycles = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (srx)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d006      	beq.n	80011d0 <W25QXX_WriteSR+0x74>
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d007      	beq.n	80011d6 <W25QXX_WriteSR+0x7a>
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d108      	bne.n	80011dc <W25QXX_WriteSR+0x80>
    {
    case 1:
        cmd.Instruction = W25X_WriteStatusReg1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
        break;
 80011ce:	e008      	b.n	80011e2 <W25QXX_WriteSR+0x86>
    case 2:
        cmd.Instruction = W25X_WriteStatusReg2;
 80011d0:	2301      	movs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
        break;
 80011d4:	e005      	b.n	80011e2 <W25QXX_WriteSR+0x86>
    case 3:
        cmd.Instruction = W25X_WriteStatusReg3;
 80011d6:	2301      	movs	r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
        break;
 80011da:	e002      	b.n	80011e2 <W25QXX_WriteSR+0x86>
    default:
        cmd.Instruction = W25X_WriteStatusReg1;
 80011dc:	2301      	movs	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
        break;
 80011e0:	bf00      	nop
    }
    if (HAL_QSPI_Command(&hqspi, &cmd, 100) == HAL_OK)
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	2264      	movs	r2, #100	; 0x64
 80011e8:	4619      	mov	r1, r3
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <W25QXX_WriteSR+0xb4>)
 80011ec:	f000 fd0e 	bl	8001c0c <HAL_QSPI_Command>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <W25QXX_WriteSR+0xa6>
    {
        HAL_QSPI_Transmit(&hqspi, &dat, 100);
 80011f6:	1dbb      	adds	r3, r7, #6
 80011f8:	2264      	movs	r2, #100	; 0x64
 80011fa:	4619      	mov	r1, r3
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <W25QXX_WriteSR+0xb4>)
 80011fe:	f000 fd63 	bl	8001cc8 <HAL_QSPI_Transmit>
    }
}
 8001202:	bf00      	nop
 8001204:	3740      	adds	r7, #64	; 0x40
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	24000094 	.word	0x24000094
 8001210:	240000a4 	.word	0x240000a4

08001214 <W25QXX_WriteEnable>:

void W25QXX_WriteEnable(uint8_t en)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b090      	sub	sp, #64	; 0x40
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
    QSPI_CommandTypeDef cmd;

    if (w25qxx_mode)
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <W25QXX_WriteEnable+0x78>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <W25QXX_WriteEnable+0x1a>
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	e002      	b.n	8001234 <W25QXX_WriteEnable+0x20>
    }
    else
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	623b      	str	r3, [r7, #32]
    }

    if (en)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <W25QXX_WriteEnable+0x2c>
    {
        cmd.Instruction = W25X_WriteEnable;
 800123a:	2306      	movs	r3, #6
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	e001      	b.n	8001244 <W25QXX_WriteEnable+0x30>
    }
    else
    {
        cmd.Instruction = W25X_WriteDisable;
 8001240:	2304      	movs	r3, #4
 8001242:	60bb      	str	r3, [r7, #8]
    }

    cmd.AddressMode = QSPI_ADDRESS_NONE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 8001248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124c:	617b      	str	r3, [r7, #20]
    cmd.Address = 0x00;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]

    cmd.DataMode = QSPI_DATA_NONE;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.NbData = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	633b      	str	r3, [r7, #48]	; 0x30

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    cmd.AlternateBytesSize = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
    cmd.AlternateBytes = 0x00;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]

    cmd.DummyCycles = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800126e:	2300      	movs	r3, #0
 8001270:	63bb      	str	r3, [r7, #56]	; 0x38
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001272:	2300      	movs	r3, #0
 8001274:	63fb      	str	r3, [r7, #60]	; 0x3c

    HAL_QSPI_Command(&hqspi, &cmd, 100);
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2264      	movs	r2, #100	; 0x64
 800127c:	4619      	mov	r1, r3
 800127e:	4804      	ldr	r0, [pc, #16]	; (8001290 <W25QXX_WriteEnable+0x7c>)
 8001280:	f000 fcc4 	bl	8001c0c <HAL_QSPI_Command>
}
 8001284:	bf00      	nop
 8001286:	3740      	adds	r7, #64	; 0x40
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	24000094 	.word	0x24000094
 8001290:	240000a4 	.word	0x240000a4

08001294 <W25QXX_MftrDeviceID>:

uint16_t W25QXX_MftrDeviceID(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b090      	sub	sp, #64	; 0x40
 8001298:	af00      	add	r7, sp, #0
    uint8_t pData[2];
    uint16_t MftrID = 0xEEEE;
 800129a:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 800129e:	87fb      	strh	r3, [r7, #62]	; 0x3e

    QSPI_CommandTypeDef cmd;

    if (w25qxx_mode == W25QXX_MODE_QPI)
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <W25QXX_MftrDeviceID+0xb4>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d109      	bne.n	80012bc <W25QXX_MftrDeviceID+0x28>
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80012a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ac:	61fb      	str	r3, [r7, #28]
        cmd.AddressMode = QSPI_ADDRESS_4_LINES;
 80012ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012b2:	623b      	str	r3, [r7, #32]
        cmd.DataMode = QSPI_DATA_4_LINES;
 80012b4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ba:	e008      	b.n	80012ce <W25QXX_MftrDeviceID+0x3a>
    }
    else
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80012bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c0:	61fb      	str	r3, [r7, #28]
        cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	623b      	str	r3, [r7, #32]
        cmd.DataMode = QSPI_DATA_1_LINE;
 80012c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    cmd.Instruction = W25X_ManufacturerDeviceID;
 80012ce:	2390      	movs	r3, #144	; 0x90
 80012d0:	607b      	str	r3, [r7, #4]

    cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	613b      	str	r3, [r7, #16]
    cmd.Address = 0x00;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]

    cmd.NbData = 2;
 80012dc:	2302      	movs	r3, #2
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.AlternateBytesSize = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
    cmd.AlternateBytes = 0x00;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]

    cmd.DummyCycles = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80012f4:	2300      	movs	r3, #0
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_QSPI_Command(&hqspi, &cmd, 100) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2264      	movs	r2, #100	; 0x64
 8001300:	4619      	mov	r1, r3
 8001302:	4812      	ldr	r0, [pc, #72]	; (800134c <W25QXX_MftrDeviceID+0xb8>)
 8001304:	f000 fc82 	bl	8001c0c <HAL_QSPI_Command>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <W25QXX_MftrDeviceID+0x7e>
    {
        return MftrID;
 800130e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001310:	e016      	b.n	8001340 <W25QXX_MftrDeviceID+0xac>
    }
    if (HAL_QSPI_Receive(&hqspi, pData, 100) != HAL_OK)
 8001312:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001316:	2264      	movs	r2, #100	; 0x64
 8001318:	4619      	mov	r1, r3
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <W25QXX_MftrDeviceID+0xb8>)
 800131c:	f000 fd66 	bl	8001dec <HAL_QSPI_Receive>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <W25QXX_MftrDeviceID+0x96>
    {
        return MftrID;
 8001326:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001328:	e00a      	b.n	8001340 <W25QXX_MftrDeviceID+0xac>
    }
    MftrID = (pData[0] << 8) | pData[1];
 800132a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21a      	sxth	r2, r3
 8001332:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21b      	sxth	r3, r3
 800133c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    return MftrID;
 800133e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 8001340:	4618      	mov	r0, r3
 8001342:	3740      	adds	r7, #64	; 0x40
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	24000094 	.word	0x24000094
 800134c:	240000a4 	.word	0x240000a4

08001350 <W25QXX_WaitBusy>:
    HAL_QSPI_Command(&hqspi, &cmd, 100);
    W25QXX_WaitBusy();
}

void W25QXX_WaitBusy(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    while ((W25QXX_ReadSR(1) & BUSY_MASK) == BUSY_MASK)
 8001354:	bf00      	nop
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff fea2 	bl	80010a0 <W25QXX_ReadSR>
 800135c:	4603      	mov	r3, r0
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b01      	cmp	r3, #1
 8001364:	d0f7      	beq.n	8001356 <W25QXX_WaitBusy+0x6>
        ;
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <W25QXX_Reset>:

void W25QXX_Reset(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef cmd;

    if (w25qxx_mode)
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <W25QXX_Reset+0x80>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <W25QXX_Reset+0x16>
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800137a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	e002      	b.n	8001388 <W25QXX_Reset+0x1c>
    }
    else
    {
        cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001386:	61bb      	str	r3, [r7, #24]
    }
    cmd.Instruction = W25X_EnableReset;
 8001388:	2366      	movs	r3, #102	; 0x66
 800138a:	603b      	str	r3, [r7, #0]

    cmd.AddressMode = QSPI_ADDRESS_NONE;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	60fb      	str	r3, [r7, #12]
    cmd.Address = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]

    cmd.DataMode = QSPI_DATA_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    cmd.NbData = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28

    cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesSize = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
    cmd.AlternateBytes = 0x00;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]

    cmd.DummyCycles = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

    cmd.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013ba:	2300      	movs	r3, #0
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34

    W25QXX_WaitBusy();
 80013be:	f7ff ffc7 	bl	8001350 <W25QXX_WaitBusy>
    if (HAL_QSPI_Command(&hqspi, &cmd, 100) == HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	2264      	movs	r2, #100	; 0x64
 80013c6:	4619      	mov	r1, r3
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <W25QXX_Reset+0x84>)
 80013ca:	f000 fc1f 	bl	8001c0c <HAL_QSPI_Command>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d107      	bne.n	80013e4 <W25QXX_Reset+0x78>
    {
        cmd.Instruction = W25X_ResetDevice;
 80013d4:	2399      	movs	r3, #153	; 0x99
 80013d6:	603b      	str	r3, [r7, #0]
        HAL_QSPI_Command(&hqspi, &cmd, 100);
 80013d8:	463b      	mov	r3, r7
 80013da:	2264      	movs	r2, #100	; 0x64
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <W25QXX_Reset+0x84>)
 80013e0:	f000 fc14 	bl	8001c0c <HAL_QSPI_Command>
    }
}
 80013e4:	bf00      	nop
 80013e6:	3738      	adds	r7, #56	; 0x38
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	24000094 	.word	0x24000094
 80013f0:	240000a4 	.word	0x240000a4

080013f4 <W25Q_Memory_Mapped_Enable>:

void W25Q_Memory_Mapped_Enable(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b090      	sub	sp, #64	; 0x40
 80013f8:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80013fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fe:	623b      	str	r3, [r7, #32]
  s_command.Instruction = W25X_FastReadQuadIO;
 8001400:	23eb      	movs	r3, #235	; 0xeb
 8001402:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8001404:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode = QSPI_DATA_4_LINES;
 8001414:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles = 8;
 800141a:	2308      	movs	r3, #8
 800141c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001422:	2300      	movs	r3, #0
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001426:	2300      	movs	r3, #0
 8001428:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001432:	463a      	mov	r2, r7
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4619      	mov	r1, r3
 800143a:	4803      	ldr	r0, [pc, #12]	; (8001448 <W25Q_Memory_Mapped_Enable+0x54>)
 800143c:	f000 fd73 	bl	8001f26 <HAL_QSPI_MemoryMapped>
  {

  }
}
 8001440:	bf00      	nop
 8001442:	3740      	adds	r7, #64	; 0x40
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	240000a4 	.word	0x240000a4

0800144c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001452:	2003      	movs	r0, #3
 8001454:	f000 f94a 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001458:	f001 fd58 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 800145c:	4601      	mov	r1, r0
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_Init+0x68>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_Init+0x6c>)
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	fa21 f303 	lsr.w	r3, r1, r3
 8001474:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_Init+0x68>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_Init+0x6c>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_Init+0x70>)
 800148e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_Init+0x74>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f814 	bl	80014c4 <HAL_InitTick>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e002      	b.n	80014ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014a6:	f7ff faf7 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	58024400 	.word	0x58024400
 80014b8:	08006a34 	.word	0x08006a34
 80014bc:	24000004 	.word	0x24000004
 80014c0:	24000000 	.word	0x24000000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_InitTick+0x60>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e021      	b.n	800151c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_InitTick+0x64>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_InitTick+0x60>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f921 	bl	8001736 <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f8f9 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x68>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2400000c 	.word	0x2400000c
 8001528:	24000000 	.word	0x24000000
 800152c:	24000008 	.word	0x24000008

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2400000c 	.word	0x2400000c
 8001554:	2400017c 	.word	0x2400017c

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2400017c 	.word	0x2400017c

08001570 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetREVID+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0c1b      	lsrs	r3, r3, #16
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	5c001000 	.word	0x5c001000

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00
 80015cc:	05fa0000 	.word	0x05fa0000

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff47 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff5e 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff90 	bl	8001640 <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5f 	bl	80015ec <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffb2 	bl	80016a8 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800175e:	4b89      	ldr	r3, [pc, #548]	; (8001984 <HAL_GPIO_Init+0x234>)
 8001760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001762:	e194      	b.n	8001a8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8186 	beq.w	8001a88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d00b      	beq.n	800179c <HAL_GPIO_Init+0x4c>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d007      	beq.n	800179c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001790:	2b11      	cmp	r3, #17
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b12      	cmp	r3, #18
 800179a:	d130      	bne.n	80017fe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d2:	2201      	movs	r2, #1
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	f003 0201 	and.w	r2, r3, #1
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0xee>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b12      	cmp	r3, #18
 800183c:	d123      	bne.n	8001886 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	69b9      	ldr	r1, [r7, #24]
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80e0 	beq.w	8001a88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x238>)
 80018ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018ce:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <HAL_GPIO_Init+0x238>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_GPIO_Init+0x238>)
 80018da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e6:	4a29      	ldr	r2, [pc, #164]	; (800198c <HAL_GPIO_Init+0x23c>)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a20      	ldr	r2, [pc, #128]	; (8001990 <HAL_GPIO_Init+0x240>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d052      	beq.n	80019b8 <HAL_GPIO_Init+0x268>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <HAL_GPIO_Init+0x244>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d031      	beq.n	800197e <HAL_GPIO_Init+0x22e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <HAL_GPIO_Init+0x248>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d02b      	beq.n	800197a <HAL_GPIO_Init+0x22a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a1d      	ldr	r2, [pc, #116]	; (800199c <HAL_GPIO_Init+0x24c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d025      	beq.n	8001976 <HAL_GPIO_Init+0x226>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <HAL_GPIO_Init+0x250>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01f      	beq.n	8001972 <HAL_GPIO_Init+0x222>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_GPIO_Init+0x254>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <HAL_GPIO_Init+0x21e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <HAL_GPIO_Init+0x258>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0x21a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_GPIO_Init+0x25c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x216>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <HAL_GPIO_Init+0x260>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x212>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <HAL_GPIO_Init+0x264>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x20e>
 800195a:	2309      	movs	r3, #9
 800195c:	e02d      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800195e:	230a      	movs	r3, #10
 8001960:	e02b      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001962:	2308      	movs	r3, #8
 8001964:	e029      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001966:	2307      	movs	r3, #7
 8001968:	e027      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800196a:	2306      	movs	r3, #6
 800196c:	e025      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800196e:	2305      	movs	r3, #5
 8001970:	e023      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001972:	2304      	movs	r3, #4
 8001974:	e021      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001976:	2303      	movs	r3, #3
 8001978:	e01f      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800197a:	2302      	movs	r3, #2
 800197c:	e01d      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800197e:	2301      	movs	r3, #1
 8001980:	e01b      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001982:	bf00      	nop
 8001984:	58000080 	.word	0x58000080
 8001988:	58024400 	.word	0x58024400
 800198c:	58000400 	.word	0x58000400
 8001990:	58020000 	.word	0x58020000
 8001994:	58020400 	.word	0x58020400
 8001998:	58020800 	.word	0x58020800
 800199c:	58020c00 	.word	0x58020c00
 80019a0:	58021000 	.word	0x58021000
 80019a4:	58021400 	.word	0x58021400
 80019a8:	58021800 	.word	0x58021800
 80019ac:	58021c00 	.word	0x58021c00
 80019b0:	58022000 	.word	0x58022000
 80019b4:	58022400 	.word	0x58022400
 80019b8:	2300      	movs	r3, #0
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ca:	4938      	ldr	r1, [pc, #224]	; (8001aac <HAL_GPIO_Init+0x35c>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f47f ae63 	bne.w	8001764 <HAL_GPIO_Init+0x14>
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	58000400 	.word	0x58000400

08001ab0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_PWREx_ConfigSupply+0x70>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d00a      	beq.n	8001ada <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_PWREx_ConfigSupply+0x70>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e01f      	b.n	8001b16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e01d      	b.n	8001b16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_PWREx_ConfigSupply+0x70>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f023 0207 	bic.w	r2, r3, #7
 8001ae2:	490f      	ldr	r1, [pc, #60]	; (8001b20 <HAL_PWREx_ConfigSupply+0x70>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001aea:	f7ff fd35 	bl	8001558 <HAL_GetTick>
 8001aee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001af0:	e009      	b.n	8001b06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001af2:	f7ff fd31 	bl	8001558 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b00:	d901      	bls.n	8001b06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e007      	b.n	8001b16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_PWREx_ConfigSupply+0x70>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b12:	d1ee      	bne.n	8001af2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	58024800 	.word	0x58024800

08001b24 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff fd14 	bl	8001558 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e05f      	b.n	8001bfc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7fe ff29 	bl	80009a0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001b4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fa49 	bl	8001fea <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	021a      	lsls	r2, r3, #8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fa41 	bl	8002006 <QSPI_WaitFlagStateUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d135      	bne.n	8001bfa <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_QSPI_Init+0xe0>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6852      	ldr	r2, [r2, #4]
 8001b9c:	0611      	lsls	r1, r2, #24
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68d2      	ldr	r2, [r2, #12]
 8001ba2:	4311      	orrs	r1, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	69d2      	ldr	r2, [r2, #28]
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6a12      	ldr	r2, [r2, #32]
 8001bae:	4311      	orrs	r1, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_QSPI_Init+0xe4>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6912      	ldr	r2, [r2, #16]
 8001bc6:	0411      	lsls	r1, r2, #16
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6952      	ldr	r2, [r2, #20]
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6992      	ldr	r2, [r2, #24]
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	00ffff2f 	.word	0x00ffff2f
 8001c08:	ffe0f8fe 	.word	0xffe0f8fe

08001c0c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff fc9e 	bl	8001558 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_QSPI_Command+0x22>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e048      	b.n	8001cc0 <HAL_QSPI_Command+0xb4>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d137      	bne.n	8001cb2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2200      	movs	r2, #0
 8001c58:	2120      	movs	r1, #32
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f9d3 	bl	8002006 <QSPI_WaitFlagStateUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d125      	bne.n	8001cb6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fa00 	bl	8002074 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d115      	bne.n	8001ca8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2201      	movs	r2, #1
 8001c84:	2102      	movs	r1, #2
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f9bd 	bl	8002006 <QSPI_WaitFlagStateUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10f      	bne.n	8001cb6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ca6:	e006      	b.n	8001cb6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cb0:	e001      	b.n	8001cb6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fc3e 	bl	8001558 <HAL_GetTick>
 8001cdc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3320      	adds	r3, #32
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_QSPI_Transmit+0x2e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e076      	b.n	8001de4 <HAL_QSPI_Transmit+0x11c>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d165      	bne.n	8001dd6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d056      	beq.n	8001dc4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2212      	movs	r2, #18
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001d4a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001d4c:	e01b      	b.n	8001d86 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2201      	movs	r2, #1
 8001d56:	2104      	movs	r1, #4
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f954 	bl	8002006 <QSPI_WaitFlagStateUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d113      	bne.n	8001d90 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1df      	bne.n	8001d4e <HAL_QSPI_Transmit+0x86>
 8001d8e:	e000      	b.n	8001d92 <HAL_QSPI_Transmit+0xca>
          break;
 8001d90:	bf00      	nop
      }

      if (status == HAL_OK)
 8001d92:	7ffb      	ldrb	r3, [r7, #31]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d110      	bne.n	8001dba <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2102      	movs	r1, #2
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f92f 	bl	8002006 <QSPI_WaitFlagStateUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001dac:	7ffb      	ldrb	r3, [r7, #31]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2202      	movs	r2, #2
 8001db8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001dc2:	e00a      	b.n	8001dda <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f043 0208 	orr.w	r2, r3, #8
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	77fb      	strb	r3, [r7, #31]
 8001dd4:	e001      	b.n	8001dda <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001de2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001dfc:	f7ff fbac 	bl	8001558 <HAL_GetTick>
 8001e00:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3320      	adds	r3, #32
 8001e10:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_QSPI_Receive+0x36>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e07d      	b.n	8001f1e <HAL_QSPI_Receive+0x132>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d16c      	bne.n	8001f10 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d05d      	beq.n	8001efe <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2222      	movs	r2, #34	; 0x22
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e7a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001e84:	e01c      	b.n	8001ec0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2106      	movs	r1, #6
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f8b8 	bl	8002006 <QSPI_WaitFlagStateUntilTimeout>
 8001e96:	4603      	mov	r3, r0
 8001e98:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d114      	bne.n	8001eca <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	1e5a      	subs	r2, r3, #1
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1de      	bne.n	8001e86 <HAL_QSPI_Receive+0x9a>
 8001ec8:	e000      	b.n	8001ecc <HAL_QSPI_Receive+0xe0>
          break;
 8001eca:	bf00      	nop
      }

      if (status == HAL_OK)
 8001ecc:	7ffb      	ldrb	r3, [r7, #31]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d110      	bne.n	8001ef4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2102      	movs	r1, #2
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f892 	bl	8002006 <QSPI_WaitFlagStateUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001efc:	e00a      	b.n	8001f14 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f043 0208 	orr.w	r2, r3, #8
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	77fb      	strb	r3, [r7, #31]
 8001f0e:	e001      	b.n	8001f14 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001f10:	2302      	movs	r3, #2
 8001f12:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b088      	sub	sp, #32
 8001f2a:	af02      	add	r7, sp, #8
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001f32:	f7ff fb11 	bl	8001558 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_QSPI_MemoryMapped+0x22>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e04c      	b.n	8001fe2 <HAL_QSPI_MemoryMapped+0xbc>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d13b      	bne.n	8001fd4 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2282      	movs	r2, #130	; 0x82
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2200      	movs	r2, #0
 8001f74:	2120      	movs	r1, #32
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f845 	bl	8002006 <QSPI_WaitFlagStateUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d128      	bne.n	8001fd8 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 0108 	bic.w	r1, r3, #8
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d110      	bne.n	8001fc6 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001fc4:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8001fc6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f851 	bl	8002074 <QSPI_Config>
 8001fd2:	e001      	b.n	8001fd8 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	4613      	mov	r3, r2
 8002014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002016:	e01a      	b.n	800204e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201e:	d016      	beq.n	800204e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002020:	f7ff fa9a 	bl	8001558 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	429a      	cmp	r2, r3
 800202e:	d302      	bcc.n	8002036 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10b      	bne.n	800204e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2204      	movs	r2, #4
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00e      	b.n	800206c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	429a      	cmp	r2, r3
 8002068:	d1d6      	bne.n	8002018 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <QSPI_Config+0x28>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800208e:	d005      	beq.n	800209c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3a01      	subs	r2, #1
 800209a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80b9 	beq.w	8002218 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d05f      	beq.n	800216e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	6892      	ldr	r2, [r2, #8]
 80020b6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d031      	beq.n	8002124 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	431a      	orrs	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	431a      	orrs	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	431a      	orrs	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	049b      	lsls	r3, r3, #18
 80020dc:	431a      	orrs	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	ea42 0103 	orr.w	r1, r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	430a      	orrs	r2, r1
 800210c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002114:	f000 812e 	beq.w	8002374 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	6852      	ldr	r2, [r2, #4]
 8002120:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002122:	e127      	b.n	8002374 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	431a      	orrs	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002132:	431a      	orrs	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	431a      	orrs	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	049b      	lsls	r3, r3, #18
 8002140:	431a      	orrs	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	431a      	orrs	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	431a      	orrs	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	431a      	orrs	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	431a      	orrs	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	ea42 0103 	orr.w	r1, r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	430a      	orrs	r2, r1
 800216a:	615a      	str	r2, [r3, #20]
}
 800216c:	e102      	b.n	8002374 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02e      	beq.n	80021d4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	431a      	orrs	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	431a      	orrs	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	431a      	orrs	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	049b      	lsls	r3, r3, #18
 8002192:	431a      	orrs	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	431a      	orrs	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	431a      	orrs	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	ea42 0103 	orr.w	r1, r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80021c4:	f000 80d6 	beq.w	8002374 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	6852      	ldr	r2, [r2, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	e0cf      	b.n	8002374 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	431a      	orrs	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e2:	431a      	orrs	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	049b      	lsls	r3, r3, #18
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	431a      	orrs	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	ea42 0103 	orr.w	r1, r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	430a      	orrs	r2, r1
 8002214:	615a      	str	r2, [r3, #20]
}
 8002216:	e0ad      	b.n	8002374 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d058      	beq.n	80022d2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	6892      	ldr	r2, [r2, #8]
 8002228:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d02d      	beq.n	800228e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	431a      	orrs	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002240:	431a      	orrs	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	431a      	orrs	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	049b      	lsls	r3, r3, #18
 800224e:	431a      	orrs	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	431a      	orrs	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	431a      	orrs	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	431a      	orrs	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	431a      	orrs	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	ea42 0103 	orr.w	r1, r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	430a      	orrs	r2, r1
 8002278:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002280:	d078      	beq.n	8002374 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	6852      	ldr	r2, [r2, #4]
 800228a:	619a      	str	r2, [r3, #24]
}
 800228c:	e072      	b.n	8002374 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	431a      	orrs	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	431a      	orrs	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	431a      	orrs	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	049b      	lsls	r3, r3, #18
 80022aa:	431a      	orrs	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	431a      	orrs	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	ea42 0103 	orr.w	r1, r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	615a      	str	r2, [r3, #20]
}
 80022d0:	e050      	b.n	8002374 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d02a      	beq.n	8002330 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	431a      	orrs	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	431a      	orrs	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	049b      	lsls	r3, r3, #18
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	431a      	orrs	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	431a      	orrs	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	ea42 0103 	orr.w	r1, r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	430a      	orrs	r2, r1
 800231a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002322:	d027      	beq.n	8002374 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	6852      	ldr	r2, [r2, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	e021      	b.n	8002374 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01d      	beq.n	8002374 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	431a      	orrs	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	431a      	orrs	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	431a      	orrs	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	049b      	lsls	r3, r3, #18
 8002354:	431a      	orrs	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	431a      	orrs	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	ea42 0103 	orr.w	r1, r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	430a      	orrs	r2, r1
 8002372:	615a      	str	r2, [r3, #20]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e3ff      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8087 	beq.w	80024ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a0:	4b99      	ldr	r3, [pc, #612]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023aa:	4b97      	ldr	r3, [pc, #604]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	d007      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46>
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	2b18      	cmp	r3, #24
 80023ba:	d110      	bne.n	80023de <HAL_RCC_OscConfig+0x5e>
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d10b      	bne.n	80023de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c6:	4b90      	ldr	r3, [pc, #576]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d06c      	beq.n	80024ac <HAL_RCC_OscConfig+0x12c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d168      	bne.n	80024ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e3d9      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x76>
 80023e8:	4b87      	ldr	r3, [pc, #540]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a86      	ldr	r2, [pc, #536]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e02e      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x98>
 80023fe:	4b82      	ldr	r3, [pc, #520]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a81      	ldr	r2, [pc, #516]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b7f      	ldr	r3, [pc, #508]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7e      	ldr	r2, [pc, #504]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0xbc>
 8002422:	4b79      	ldr	r3, [pc, #484]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a78      	ldr	r2, [pc, #480]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b76      	ldr	r3, [pc, #472]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a75      	ldr	r2, [pc, #468]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 800243c:	4b72      	ldr	r3, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a71      	ldr	r2, [pc, #452]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f87c 	bl	8001558 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff f878 	bl	8001558 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e38d      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002476:	4b64      	ldr	r3, [pc, #400]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xe4>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff f868 	bl	8001558 <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff f864 	bl	8001558 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e379      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800249e:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x10c>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80ae 	beq.w	8002618 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024bc:	4b52      	ldr	r3, [pc, #328]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024c6:	4b50      	ldr	r3, [pc, #320]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_RCC_OscConfig+0x162>
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	2b18      	cmp	r3, #24
 80024d6:	d13a      	bne.n	800254e <HAL_RCC_OscConfig+0x1ce>
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d135      	bne.n	800254e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e2:	4b49      	ldr	r3, [pc, #292]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x17a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e34b      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	f7ff f839 	bl	8001570 <HAL_GetREVID>
 80024fe:	4602      	mov	r2, r0
 8002500:	f241 0303 	movw	r3, #4099	; 0x1003
 8002504:	429a      	cmp	r2, r3
 8002506:	d817      	bhi.n	8002538 <HAL_RCC_OscConfig+0x1b8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d108      	bne.n	8002522 <HAL_RCC_OscConfig+0x1a2>
 8002510:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002518:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 800251a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002520:	e07a      	b.n	8002618 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	031b      	lsls	r3, r3, #12
 8002530:	4935      	ldr	r1, [pc, #212]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002536:	e06f      	b.n	8002618 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b33      	ldr	r3, [pc, #204]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	4930      	ldr	r1, [pc, #192]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	e064      	b.n	8002618 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d045      	beq.n	80025e2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002556:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 0219 	bic.w	r2, r3, #25
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	4929      	ldr	r1, [pc, #164]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fff6 	bl	8001558 <HAL_GetTick>
 800256c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002570:	f7fe fff2 	bl	8001558 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e307      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	f7fe ffef 	bl	8001570 <HAL_GetREVID>
 8002592:	4602      	mov	r2, r0
 8002594:	f241 0303 	movw	r3, #4099	; 0x1003
 8002598:	429a      	cmp	r2, r3
 800259a:	d817      	bhi.n	80025cc <HAL_RCC_OscConfig+0x24c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d108      	bne.n	80025b6 <HAL_RCC_OscConfig+0x236>
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025ac:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80025ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b2:	6053      	str	r3, [r2, #4]
 80025b4:	e030      	b.n	8002618 <HAL_RCC_OscConfig+0x298>
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	031b      	lsls	r3, r3, #12
 80025c4:	4910      	ldr	r1, [pc, #64]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
 80025ca:	e025      	b.n	8002618 <HAL_RCC_OscConfig+0x298>
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	490b      	ldr	r1, [pc, #44]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
 80025e0:	e01a      	b.n	8002618 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_RCC_OscConfig+0x288>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe ffb3 	bl	8001558 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f6:	f7fe ffaf 	bl	8001558 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d903      	bls.n	800260c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e2c4      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
 8002608:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800260c:	4ba4      	ldr	r3, [pc, #656]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a9 	beq.w	8002778 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002626:	4b9e      	ldr	r3, [pc, #632]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800262e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002630:	4b9b      	ldr	r3, [pc, #620]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d007      	beq.n	800264c <HAL_RCC_OscConfig+0x2cc>
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b18      	cmp	r3, #24
 8002640:	d13a      	bne.n	80026b8 <HAL_RCC_OscConfig+0x338>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d135      	bne.n	80026b8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800264c:	4b94      	ldr	r3, [pc, #592]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_OscConfig+0x2e4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e296      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002664:	f7fe ff84 	bl	8001570 <HAL_GetREVID>
 8002668:	4602      	mov	r2, r0
 800266a:	f241 0303 	movw	r3, #4099	; 0x1003
 800266e:	429a      	cmp	r2, r3
 8002670:	d817      	bhi.n	80026a2 <HAL_RCC_OscConfig+0x322>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	2b20      	cmp	r3, #32
 8002678:	d108      	bne.n	800268c <HAL_RCC_OscConfig+0x30c>
 800267a:	4b89      	ldr	r3, [pc, #548]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002682:	4a87      	ldr	r2, [pc, #540]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002688:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800268a:	e075      	b.n	8002778 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268c:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	069b      	lsls	r3, r3, #26
 800269a:	4981      	ldr	r1, [pc, #516]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a0:	e06a      	b.n	8002778 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026a2:	4b7f      	ldr	r3, [pc, #508]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	497b      	ldr	r1, [pc, #492]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b6:	e05f      	b.n	8002778 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d042      	beq.n	8002746 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026c0:	4b77      	ldr	r3, [pc, #476]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a76      	ldr	r2, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 80026c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe ff44 	bl	8001558 <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80026d4:	f7fe ff40 	bl	8001558 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e255      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026e6:	4b6e      	ldr	r3, [pc, #440]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f2:	f7fe ff3d 	bl	8001570 <HAL_GetREVID>
 80026f6:	4602      	mov	r2, r0
 80026f8:	f241 0303 	movw	r3, #4099	; 0x1003
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d817      	bhi.n	8002730 <HAL_RCC_OscConfig+0x3b0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	2b20      	cmp	r3, #32
 8002706:	d108      	bne.n	800271a <HAL_RCC_OscConfig+0x39a>
 8002708:	4b65      	ldr	r3, [pc, #404]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002710:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002716:	6053      	str	r3, [r2, #4]
 8002718:	e02e      	b.n	8002778 <HAL_RCC_OscConfig+0x3f8>
 800271a:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	069b      	lsls	r3, r3, #26
 8002728:	495d      	ldr	r1, [pc, #372]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
 800272e:	e023      	b.n	8002778 <HAL_RCC_OscConfig+0x3f8>
 8002730:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	4958      	ldr	r1, [pc, #352]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002740:	4313      	orrs	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
 8002744:	e018      	b.n	8002778 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002746:	4b56      	ldr	r3, [pc, #344]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800274c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe ff01 	bl	8001558 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800275a:	f7fe fefd 	bl	8001558 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e212      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800276c:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d036      	beq.n	80027f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d019      	beq.n	80027c0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278c:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002790:	4a43      	ldr	r2, [pc, #268]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fede 	bl	8001558 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a0:	f7fe feda 	bl	8001558 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1ef      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x420>
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c0:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 80027c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c4:	4a36      	ldr	r2, [pc, #216]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe fec4 	bl	8001558 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d4:	f7fe fec0 	bl	8001558 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1d5      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027e6:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d036      	beq.n	800286c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d019      	beq.n	800283a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800280c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002810:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002812:	f7fe fea1 	bl	8001558 <HAL_GetTick>
 8002816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800281a:	f7fe fe9d 	bl	8001558 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e1b2      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x49a>
 8002838:	e018      	b.n	800286c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800283a:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002844:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002846:	f7fe fe87 	bl	8001558 <HAL_GetTick>
 800284a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800284e:	f7fe fe83 	bl	8001558 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e198      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_RCC_OscConfig+0x520>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8085 	beq.w	8002984 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_RCC_OscConfig+0x524>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <HAL_RCC_OscConfig+0x524>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002886:	f7fe fe67 	bl	8001558 <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800288c:	e00c      	b.n	80028a8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe fe63 	bl	8001558 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d905      	bls.n	80028a8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e178      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
 80028a0:	58024400 	.word	0x58024400
 80028a4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028a8:	4b96      	ldr	r3, [pc, #600]	; (8002b04 <HAL_RCC_OscConfig+0x784>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ec      	beq.n	800288e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x54a>
 80028bc:	4b92      	ldr	r3, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a91      	ldr	r2, [pc, #580]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	e02d      	b.n	8002926 <HAL_RCC_OscConfig+0x5a6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x56c>
 80028d2:	4b8d      	ldr	r3, [pc, #564]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a8c      	ldr	r2, [pc, #560]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	4b8a      	ldr	r3, [pc, #552]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a89      	ldr	r2, [pc, #548]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	e01c      	b.n	8002926 <HAL_RCC_OscConfig+0x5a6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_OscConfig+0x58e>
 80028f4:	4b84      	ldr	r3, [pc, #528]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a83      	ldr	r2, [pc, #524]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	4b81      	ldr	r3, [pc, #516]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a80      	ldr	r2, [pc, #512]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
 800290c:	e00b      	b.n	8002926 <HAL_RCC_OscConfig+0x5a6>
 800290e:	4b7e      	ldr	r3, [pc, #504]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a7d      	ldr	r2, [pc, #500]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	4b7b      	ldr	r3, [pc, #492]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a7a      	ldr	r2, [pc, #488]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fe13 	bl	8001558 <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fe0f 	bl	8001558 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e122      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800294c:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ee      	beq.n	8002936 <HAL_RCC_OscConfig+0x5b6>
 8002958:	e014      	b.n	8002984 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fe fdfd 	bl	8001558 <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe fdf9 	bl	8001558 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e10c      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002978:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ee      	bne.n	8002962 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8101 	beq.w	8002b90 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800298e:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002996:	2b18      	cmp	r3, #24
 8002998:	f000 80bc 	beq.w	8002b14 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	f040 8095 	bne.w	8002ad0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a57      	ldr	r2, [pc, #348]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80029ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fdd1 	bl	8001558 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe fdcd 	bl	8001558 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0e2      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029cc:	4b4e      	ldr	r3, [pc, #312]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d8:	4b4b      	ldr	r3, [pc, #300]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80029da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029dc:	4b4b      	ldr	r3, [pc, #300]	; (8002b0c <HAL_RCC_OscConfig+0x78c>)
 80029de:	4013      	ands	r3, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029e8:	0112      	lsls	r2, r2, #4
 80029ea:	430a      	orrs	r2, r1
 80029ec:	4946      	ldr	r1, [pc, #280]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	628b      	str	r3, [r1, #40]	; 0x28
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	3b01      	subs	r3, #1
 8002a02:	025b      	lsls	r3, r3, #9
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a22:	4939      	ldr	r1, [pc, #228]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002a28:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4a36      	ldr	r2, [pc, #216]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a34:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_RCC_OscConfig+0x790>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a40:	00d2      	lsls	r2, r2, #3
 8002a42:	4931      	ldr	r1, [pc, #196]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a48:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f023 020c 	bic.w	r2, r3, #12
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	492c      	ldr	r1, [pc, #176]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	f023 0202 	bic.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4928      	ldr	r1, [pc, #160]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fd56 	bl	8001558 <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fd52 	bl	8001558 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e067      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x730>
 8002ace:	e05f      	b.n	8002b90 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fd3c 	bl	8001558 <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fd38 	bl	8001558 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e04d      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <HAL_RCC_OscConfig+0x788>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x764>
 8002b02:	e045      	b.n	8002b90 <HAL_RCC_OscConfig+0x810>
 8002b04:	58024800 	.word	0x58024800
 8002b08:	58024400 	.word	0x58024400
 8002b0c:	fffffc0c 	.word	0xfffffc0c
 8002b10:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_RCC_OscConfig+0x81c>)
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_RCC_OscConfig+0x81c>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d031      	beq.n	8002b8c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f003 0203 	and.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d12a      	bne.n	8002b8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d122      	bne.n	8002b8c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d11a      	bne.n	8002b8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	0a5b      	lsrs	r3, r3, #9
 8002b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d111      	bne.n	8002b8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0e1b      	lsrs	r3, r3, #24
 8002b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3730      	adds	r7, #48	; 0x30
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	58024400 	.word	0x58024400

08002ba0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e19c      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b8a      	ldr	r3, [pc, #552]	; (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b87      	ldr	r3, [pc, #540]	; (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 020f 	bic.w	r2, r3, #15
 8002bca:	4985      	ldr	r1, [pc, #532]	; (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b83      	ldr	r3, [pc, #524]	; (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e184      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d010      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d908      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c00:	4b78      	ldr	r3, [pc, #480]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4975      	ldr	r1, [pc, #468]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	4b70      	ldr	r3, [pc, #448]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d908      	bls.n	8002c40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	496a      	ldr	r1, [pc, #424]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d908      	bls.n	8002c6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c5c:	4b61      	ldr	r3, [pc, #388]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	495e      	ldr	r1, [pc, #376]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c8a:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4953      	ldr	r1, [pc, #332]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d908      	bls.n	8002cca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f023 020f 	bic.w	r2, r3, #15
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4947      	ldr	r1, [pc, #284]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d055      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4940      	ldr	r1, [pc, #256]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d121      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0f6      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d115      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0ea      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0de      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d30:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0d6      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d40:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f023 0207 	bic.w	r2, r3, #7
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4925      	ldr	r1, [pc, #148]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe fc01 	bl	8001558 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7fe fbfd 	bl	8001558 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0be      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d70:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d1eb      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d208      	bcs.n	8002db0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f023 020f 	bic.w	r2, r3, #15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	490e      	ldr	r1, [pc, #56]	; (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d214      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 020f 	bic.w	r2, r3, #15
 8002dc6:	4906      	ldr	r1, [pc, #24]	; (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e086      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
 8002de0:	52002000 	.word	0x52002000
 8002de4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	4b3f      	ldr	r3, [pc, #252]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d208      	bcs.n	8002e16 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e04:	4b3c      	ldr	r3, [pc, #240]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	4939      	ldr	r1, [pc, #228]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d208      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e32:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	492e      	ldr	r1, [pc, #184]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d208      	bcs.n	8002e72 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e60:	4b25      	ldr	r3, [pc, #148]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	4922      	ldr	r1, [pc, #136]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d208      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4917      	ldr	r1, [pc, #92]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ea0:	f000 f834 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002ea4:	4601      	mov	r1, r0
 8002ea6:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	4a12      	ldr	r2, [pc, #72]	; (8002efc <HAL_RCC_ClockConfig+0x35c>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	fa21 f303 	lsr.w	r3, r1, r3
 8002ebc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <HAL_RCC_ClockConfig+0x35c>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <HAL_RCC_ClockConfig+0x360>)
 8002ed6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x364>)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_RCC_ClockConfig+0x368>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe faee 	bl	80014c4 <HAL_InitTick>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	08006a34 	.word	0x08006a34
 8002f00:	24000004 	.word	0x24000004
 8002f04:	24000000 	.word	0x24000000
 8002f08:	24000008 	.word	0x24000008

08002f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f12:	4baf      	ldr	r3, [pc, #700]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f1a:	2b18      	cmp	r3, #24
 8002f1c:	f200 814e 	bhi.w	80031bc <HAL_RCC_GetSysClockFreq+0x2b0>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f8d 	.word	0x08002f8d
 8002f2c:	080031bd 	.word	0x080031bd
 8002f30:	080031bd 	.word	0x080031bd
 8002f34:	080031bd 	.word	0x080031bd
 8002f38:	080031bd 	.word	0x080031bd
 8002f3c:	080031bd 	.word	0x080031bd
 8002f40:	080031bd 	.word	0x080031bd
 8002f44:	080031bd 	.word	0x080031bd
 8002f48:	08002fb3 	.word	0x08002fb3
 8002f4c:	080031bd 	.word	0x080031bd
 8002f50:	080031bd 	.word	0x080031bd
 8002f54:	080031bd 	.word	0x080031bd
 8002f58:	080031bd 	.word	0x080031bd
 8002f5c:	080031bd 	.word	0x080031bd
 8002f60:	080031bd 	.word	0x080031bd
 8002f64:	080031bd 	.word	0x080031bd
 8002f68:	08002fb9 	.word	0x08002fb9
 8002f6c:	080031bd 	.word	0x080031bd
 8002f70:	080031bd 	.word	0x080031bd
 8002f74:	080031bd 	.word	0x080031bd
 8002f78:	080031bd 	.word	0x080031bd
 8002f7c:	080031bd 	.word	0x080031bd
 8002f80:	080031bd 	.word	0x080031bd
 8002f84:	080031bd 	.word	0x080031bd
 8002f88:	08002fbf 	.word	0x08002fbf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f8c:	4b90      	ldr	r3, [pc, #576]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f98:	4b8d      	ldr	r3, [pc, #564]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	08db      	lsrs	r3, r3, #3
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	4a8c      	ldr	r2, [pc, #560]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002faa:	e10a      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fac:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002fae:	61bb      	str	r3, [r7, #24]
    break;
 8002fb0:	e107      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002fb2:	4b89      	ldr	r3, [pc, #548]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002fb4:	61bb      	str	r3, [r7, #24]
    break;
 8002fb6:	e104      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002fb8:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002fba:	61bb      	str	r3, [r7, #24]
    break;
 8002fbc:	e101      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fbe:	4b84      	ldr	r3, [pc, #528]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002fc8:	4b81      	ldr	r3, [pc, #516]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fd4:	4b7e      	ldr	r3, [pc, #504]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002fde:	4b7c      	ldr	r3, [pc, #496]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	08db      	lsrs	r3, r3, #3
 8002fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80da 	beq.w	80031b6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d05a      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x1b2>
 8003008:	2b01      	cmp	r3, #1
 800300a:	d302      	bcc.n	8003012 <HAL_RCC_GetSysClockFreq+0x106>
 800300c:	2b02      	cmp	r3, #2
 800300e:	d078      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003010:	e099      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003012:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d02d      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800301e:	4b6c      	ldr	r3, [pc, #432]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	08db      	lsrs	r3, r3, #3
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	4a6a      	ldr	r2, [pc, #424]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003048:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003058:	ed97 6a02 	vldr	s12, [r7, #8]
 800305c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800306c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003074:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003078:	e087      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	ee07 3a90 	vmov	s15, r3
 8003080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003084:	eddf 6a57 	vldr	s13, [pc, #348]	; 80031e4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309c:	ed97 6a02 	vldr	s12, [r7, #8]
 80030a0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80030a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030bc:	e065      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80031e8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80030cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d0:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80030e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003100:	e043      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310c:	eddf 6a37 	vldr	s13, [pc, #220]	; 80031ec <HAL_RCC_GetSysClockFreq+0x2e0>
 8003110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003114:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003124:	ed97 6a02 	vldr	s12, [r7, #8]
 8003128:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800312c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003140:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003144:	e021      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003150:	eddf 6a25 	vldr	s13, [pc, #148]	; 80031e8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003160:	ee07 3a90 	vmov	s15, r3
 8003164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003168:	ed97 6a02 	vldr	s12, [r7, #8]
 800316c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800317c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003184:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003188:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003194:	3301      	adds	r3, #1
 8003196:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80031a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ae:	ee17 3a90 	vmov	r3, s15
 80031b2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80031b4:	e005      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
    break;
 80031ba:	e002      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80031be:	61bb      	str	r3, [r7, #24]
    break;
 80031c0:	bf00      	nop
  }

  return sysclockfreq;
 80031c2:	69bb      	ldr	r3, [r7, #24]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3724      	adds	r7, #36	; 0x24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	58024400 	.word	0x58024400
 80031d4:	03d09000 	.word	0x03d09000
 80031d8:	003d0900 	.word	0x003d0900
 80031dc:	017d7840 	.word	0x017d7840
 80031e0:	46000000 	.word	0x46000000
 80031e4:	4c742400 	.word	0x4c742400
 80031e8:	4a742400 	.word	0x4a742400
 80031ec:	4bbebc20 	.word	0x4bbebc20

080031f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031f6:	f7ff fe89 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 80031fa:	4601      	mov	r1, r0
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_RCC_GetHCLKFreq+0x50>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_RCC_GetHCLKFreq+0x54>)
 8003208:	5cd3      	ldrb	r3, [r2, r3]
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	fa21 f303 	lsr.w	r3, r1, r3
 8003212:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_GetHCLKFreq+0x50>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	4a09      	ldr	r2, [pc, #36]	; (8003244 <HAL_RCC_GetHCLKFreq+0x54>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_RCC_GetHCLKFreq+0x58>)
 800322c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800322e:	4a07      	ldr	r2, [pc, #28]	; (800324c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <HAL_RCC_GetHCLKFreq+0x58>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	58024400 	.word	0x58024400
 8003244:	08006a34 	.word	0x08006a34
 8003248:	24000004 	.word	0x24000004
 800324c:	24000000 	.word	0x24000000

08003250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003254:	f7ff ffcc 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003258:	4601      	mov	r1, r0
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	58024400 	.word	0x58024400
 8003278:	08006a34 	.word	0x08006a34

0800327c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003280:	f7ff ffb6 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003284:	4601      	mov	r1, r0
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	58024400 	.word	0x58024400
 80032a4:	08006a34 	.word	0x08006a34

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b4:	2300      	movs	r3, #0
 80032b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d03d      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032cc:	d013      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80032ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d2:	d802      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80032d8:	e01f      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80032da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032de:	d013      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80032e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032e4:	d01c      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80032e6:	e018      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e8:	4baf      	ldr	r3, [pc, #700]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	4aae      	ldr	r2, [pc, #696]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80032ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80032f4:	e015      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2102      	movs	r1, #2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 f96f 	bl	80045e0 <RCCEx_PLL2_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003306:	e00c      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3324      	adds	r3, #36	; 0x24
 800330c:	2102      	movs	r1, #2
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fa18 	bl	8004744 <RCCEx_PLL3_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
      break;
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003328:	4b9f      	ldr	r3, [pc, #636]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800332a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003334:	499c      	ldr	r1, [pc, #624]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003336:	4313      	orrs	r3, r2
 8003338:	650b      	str	r3, [r1, #80]	; 0x50
 800333a:	e001      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d03d      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	2b04      	cmp	r3, #4
 8003352:	d826      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003354:	a201      	add	r2, pc, #4	; (adr r2, 800335c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	08003371 	.word	0x08003371
 8003360:	0800337f 	.word	0x0800337f
 8003364:	08003391 	.word	0x08003391
 8003368:	080033a9 	.word	0x080033a9
 800336c:	080033a9 	.word	0x080033a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003370:	4b8d      	ldr	r3, [pc, #564]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	4a8c      	ldr	r2, [pc, #560]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800337c:	e015      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f001 f92b 	bl	80045e0 <RCCEx_PLL2_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800338e:	e00c      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3324      	adds	r3, #36	; 0x24
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f001 f9d4 	bl	8004744 <RCCEx_PLL3_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
      break;
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80033a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b0:	4b7d      	ldr	r3, [pc, #500]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	f023 0207 	bic.w	r2, r3, #7
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	497a      	ldr	r1, [pc, #488]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	650b      	str	r3, [r1, #80]	; 0x50
 80033c2:	e001      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d03e      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d01c      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d804      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x142>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d00d      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80033e8:	e01e      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80033ea:	2bc0      	cmp	r3, #192	; 0xc0
 80033ec:	d01f      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80033ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f2:	d01e      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80033f4:	e018      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f6:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	4a6b      	ldr	r2, [pc, #428]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003402:	e017      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f001 f8e8 	bl	80045e0 <RCCEx_PLL2_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003414:	e00e      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3324      	adds	r3, #36	; 0x24
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f001 f991 	bl	8004744 <RCCEx_PLL3_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003426:	e005      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	75fb      	strb	r3, [r7, #23]
      break;
 800342c:	e002      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800343a:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4958      	ldr	r1, [pc, #352]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003448:	4313      	orrs	r3, r2
 800344a:	650b      	str	r3, [r1, #80]	; 0x50
 800344c:	e001      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	2b00      	cmp	r3, #0
 800345c:	d044      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003468:	d01f      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800346a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346e:	d805      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003478:	d00e      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800347a:	e01f      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x214>
 800347c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003480:	d01f      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003486:	d01e      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003488:	e018      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	4a46      	ldr	r2, [pc, #280]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003494:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003496:	e017      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 f89e 	bl	80045e0 <RCCEx_PLL2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80034a8:	e00e      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3324      	adds	r3, #36	; 0x24
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 f947 	bl	8004744 <RCCEx_PLL3_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034ba:	e005      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	75fb      	strb	r3, [r7, #23]
      break;
 80034c0:	e002      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80034c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034ce:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034dc:	4932      	ldr	r1, [pc, #200]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	658b      	str	r3, [r1, #88]	; 0x58
 80034e2:	e001      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d044      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034fe:	d01f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003504:	d805      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800350a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350e:	d00e      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003510:	e01f      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003512:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003516:	d01f      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800351c:	d01e      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800351e:	e018      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a20      	ldr	r2, [pc, #128]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800352c:	e017      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f001 f853 	bl	80045e0 <RCCEx_PLL2_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800353e:	e00e      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3324      	adds	r3, #36	; 0x24
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f8fc 	bl	8004744 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003550:	e005      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
      break;
 8003556:	e002      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800355c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003572:	490d      	ldr	r1, [pc, #52]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003574:	4313      	orrs	r3, r2
 8003576:	658b      	str	r3, [r1, #88]	; 0x58
 8003578:	e001      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357a:	7dfb      	ldrb	r3, [r7, #23]
 800357c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d035      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	2b10      	cmp	r3, #16
 8003590:	d00c      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003592:	2b10      	cmp	r3, #16
 8003594:	d802      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01b      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800359a:	e017      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x324>
 800359c:	2b20      	cmp	r3, #32
 800359e:	d00c      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x312>
 80035a0:	2b30      	cmp	r3, #48	; 0x30
 80035a2:	d018      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80035a4:	e012      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80035a6:	bf00      	nop
 80035a8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ac:	4baf      	ldr	r3, [pc, #700]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	4aae      	ldr	r2, [pc, #696]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80035b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80035b8:	e00e      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	2102      	movs	r1, #2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f001 f80d 	bl	80045e0 <RCCEx_PLL2_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80035ca:	e005      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	75fb      	strb	r3, [r7, #23]
      break;
 80035d0:	e002      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80035d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80035de:	4ba3      	ldr	r3, [pc, #652]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ea:	49a0      	ldr	r1, [pc, #640]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035f0:	e001      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d042      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360a:	d01f      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800360c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003610:	d805      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361a:	d00e      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800361c:	e01f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800361e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003622:	d01f      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003628:	d01e      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800362a:	e018      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b8f      	ldr	r3, [pc, #572]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4a8e      	ldr	r2, [pc, #568]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003638:	e017      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f000 ffcd 	bl	80045e0 <RCCEx_PLL2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800364a:	e00e      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3324      	adds	r3, #36	; 0x24
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f001 f876 	bl	8004744 <RCCEx_PLL3_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800365c:	e005      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
      break;
 8003662:	e002      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003664:	bf00      	nop
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003670:	4b7e      	ldr	r3, [pc, #504]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	497b      	ldr	r1, [pc, #492]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	650b      	str	r3, [r1, #80]	; 0x50
 8003682:	e001      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d042      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800369c:	d01b      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800369e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036a2:	d805      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d022      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x446>
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80036ae:	e01b      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80036b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036b4:	d01d      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80036b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ba:	d01c      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80036bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036c0:	d01b      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
 80036c2:	e011      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	2101      	movs	r1, #1
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 ff88 	bl	80045e0 <RCCEx_PLL2_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80036d4:	e012      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3324      	adds	r3, #36	; 0x24
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 f831 	bl	8004744 <RCCEx_PLL3_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80036e6:	e009      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]
      break;
 80036ec:	e006      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80036ee:	bf00      	nop
 80036f0:	e004      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80036fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003702:	4b5a      	ldr	r3, [pc, #360]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370e:	4957      	ldr	r1, [pc, #348]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	650b      	str	r3, [r1, #80]	; 0x50
 8003714:	e001      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d044      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800372c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003730:	d01b      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003736:	d805      	bhi.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d022      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800373c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003742:	e01b      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003748:	d01d      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800374a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800374e:	d01c      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003750:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003754:	d01b      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003756:	e011      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	2101      	movs	r1, #1
 800375e:	4618      	mov	r0, r3
 8003760:	f000 ff3e 	bl	80045e0 <RCCEx_PLL2_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003768:	e012      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3324      	adds	r3, #36	; 0x24
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f000 ffe7 	bl	8004744 <RCCEx_PLL3_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800377a:	e009      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
      break;
 8003780:	e006      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003782:	bf00      	nop
 8003784:	e004      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800378e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003796:	4b35      	ldr	r3, [pc, #212]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037a4:	4931      	ldr	r1, [pc, #196]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	658b      	str	r3, [r1, #88]	; 0x58
 80037aa:	e001      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02d      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c4:	d005      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80037c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ca:	d009      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80037d0:	e00f      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	4a25      	ldr	r2, [pc, #148]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80037de:	e00c      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fefa 	bl	80045e0 <RCCEx_PLL2_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
      break;
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80037f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380c:	4917      	ldr	r1, [pc, #92]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	650b      	str	r3, [r1, #80]	; 0x50
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d035      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	2b03      	cmp	r3, #3
 800382a:	d81b      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003871 	.word	0x08003871
 8003838:	08003845 	.word	0x08003845
 800383c:	08003853 	.word	0x08003853
 8003840:	08003871 	.word	0x08003871
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	4a08      	ldr	r2, [pc, #32]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800384a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003850:	e00f      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	2102      	movs	r1, #2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fec1 	bl	80045e0 <RCCEx_PLL2_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003862:	e006      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	75fb      	strb	r3, [r7, #23]
      break;
 8003868:	e003      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800386a:	bf00      	nop
 800386c:	58024400 	.word	0x58024400
      break;
 8003870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003878:	4bba      	ldr	r3, [pc, #744]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	f023 0203 	bic.w	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	49b7      	ldr	r1, [pc, #732]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	64cb      	str	r3, [r1, #76]	; 0x4c
 800388a:	e001      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8086 	beq.w	80039aa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800389e:	4bb2      	ldr	r3, [pc, #712]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4ab1      	ldr	r2, [pc, #708]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038aa:	f7fd fe55 	bl	8001558 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038b0:	e009      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b2:	f7fd fe51 	bl	8001558 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	; 0x64
 80038be:	d902      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	75fb      	strb	r3, [r7, #23]
        break;
 80038c4:	e005      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c6:	4ba8      	ldr	r3, [pc, #672]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ef      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d166      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038d8:	4ba2      	ldr	r3, [pc, #648]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80038da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038e2:	4053      	eors	r3, r2
 80038e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ec:	4b9d      	ldr	r3, [pc, #628]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f6:	4b9b      	ldr	r3, [pc, #620]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a9a      	ldr	r2, [pc, #616]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003902:	4b98      	ldr	r3, [pc, #608]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a97      	ldr	r2, [pc, #604]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800390e:	4a95      	ldr	r2, [pc, #596]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800391a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391e:	d115      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fe1a 	bl	8001558 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003926:	e00b      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003928:	f7fd fe16 	bl	8001558 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d902      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	75fb      	strb	r3, [r7, #23]
            break;
 800393e:	e005      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003940:	4b88      	ldr	r3, [pc, #544]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ed      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d126      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003960:	d10d      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003962:	4b80      	ldr	r3, [pc, #512]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003970:	0919      	lsrs	r1, r3, #4
 8003972:	4b7e      	ldr	r3, [pc, #504]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003974:	400b      	ands	r3, r1
 8003976:	497b      	ldr	r1, [pc, #492]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003978:	4313      	orrs	r3, r2
 800397a:	610b      	str	r3, [r1, #16]
 800397c:	e005      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800397e:	4b79      	ldr	r3, [pc, #484]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	4a78      	ldr	r2, [pc, #480]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003984:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003988:	6113      	str	r3, [r2, #16]
 800398a:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800398c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	4972      	ldr	r1, [pc, #456]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	670b      	str	r3, [r1, #112]	; 0x70
 800399e:	e004      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	75bb      	strb	r3, [r7, #22]
 80039a4:	e001      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d07d      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ba:	2b28      	cmp	r3, #40	; 0x28
 80039bc:	d866      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	08003a93 	.word	0x08003a93
 80039c8:	08003a8d 	.word	0x08003a8d
 80039cc:	08003a8d 	.word	0x08003a8d
 80039d0:	08003a8d 	.word	0x08003a8d
 80039d4:	08003a8d 	.word	0x08003a8d
 80039d8:	08003a8d 	.word	0x08003a8d
 80039dc:	08003a8d 	.word	0x08003a8d
 80039e0:	08003a8d 	.word	0x08003a8d
 80039e4:	08003a69 	.word	0x08003a69
 80039e8:	08003a8d 	.word	0x08003a8d
 80039ec:	08003a8d 	.word	0x08003a8d
 80039f0:	08003a8d 	.word	0x08003a8d
 80039f4:	08003a8d 	.word	0x08003a8d
 80039f8:	08003a8d 	.word	0x08003a8d
 80039fc:	08003a8d 	.word	0x08003a8d
 8003a00:	08003a8d 	.word	0x08003a8d
 8003a04:	08003a7b 	.word	0x08003a7b
 8003a08:	08003a8d 	.word	0x08003a8d
 8003a0c:	08003a8d 	.word	0x08003a8d
 8003a10:	08003a8d 	.word	0x08003a8d
 8003a14:	08003a8d 	.word	0x08003a8d
 8003a18:	08003a8d 	.word	0x08003a8d
 8003a1c:	08003a8d 	.word	0x08003a8d
 8003a20:	08003a8d 	.word	0x08003a8d
 8003a24:	08003a93 	.word	0x08003a93
 8003a28:	08003a8d 	.word	0x08003a8d
 8003a2c:	08003a8d 	.word	0x08003a8d
 8003a30:	08003a8d 	.word	0x08003a8d
 8003a34:	08003a8d 	.word	0x08003a8d
 8003a38:	08003a8d 	.word	0x08003a8d
 8003a3c:	08003a8d 	.word	0x08003a8d
 8003a40:	08003a8d 	.word	0x08003a8d
 8003a44:	08003a93 	.word	0x08003a93
 8003a48:	08003a8d 	.word	0x08003a8d
 8003a4c:	08003a8d 	.word	0x08003a8d
 8003a50:	08003a8d 	.word	0x08003a8d
 8003a54:	08003a8d 	.word	0x08003a8d
 8003a58:	08003a8d 	.word	0x08003a8d
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003a8d 	.word	0x08003a8d
 8003a64:	08003a93 	.word	0x08003a93
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fdb6 	bl	80045e0 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a78:	e00c      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3324      	adds	r3, #36	; 0x24
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fe5f 	bl	8004744 <RCCEx_PLL3_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a8a:	e003      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a90:	e000      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a9a:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa6:	492f      	ldr	r1, [pc, #188]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	654b      	str	r3, [r1, #84]	; 0x54
 8003aac:	e001      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d037      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d820      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b0f 	.word	0x08003b0f
 8003ad0:	08003ae5 	.word	0x08003ae5
 8003ad4:	08003af7 	.word	0x08003af7
 8003ad8:	08003b0f 	.word	0x08003b0f
 8003adc:	08003b0f 	.word	0x08003b0f
 8003ae0:	08003b0f 	.word	0x08003b0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fd78 	bl	80045e0 <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003af4:	e00c      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3324      	adds	r3, #36	; 0x24
 8003afa:	2101      	movs	r1, #1
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fe21 	bl	8004744 <RCCEx_PLL3_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b06:	e003      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0c:	e000      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b16:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b22:	4910      	ldr	r1, [pc, #64]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	654b      	str	r3, [r1, #84]	; 0x54
 8003b28:	e001      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d040      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d827      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b9b 	.word	0x08003b9b
 8003b50:	08003b71 	.word	0x08003b71
 8003b54:	08003b83 	.word	0x08003b83
 8003b58:	08003b9b 	.word	0x08003b9b
 8003b5c:	08003b9b 	.word	0x08003b9b
 8003b60:	08003b9b 	.word	0x08003b9b
 8003b64:	58024400 	.word	0x58024400
 8003b68:	58024800 	.word	0x58024800
 8003b6c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	2101      	movs	r1, #1
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fd32 	bl	80045e0 <RCCEx_PLL2_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b80:	e00c      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3324      	adds	r3, #36	; 0x24
 8003b86:	2101      	movs	r1, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fddb 	bl	8004744 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b92:	e003      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
      break;
 8003b98:	e000      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ba2:	4bb2      	ldr	r3, [pc, #712]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	f023 0207 	bic.w	r2, r3, #7
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	49ae      	ldr	r1, [pc, #696]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	658b      	str	r3, [r1, #88]	; 0x58
 8003bb6:	e001      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d044      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd2:	d01b      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd8:	d805      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d022      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003be4:	e01b      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d01d      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf0:	d01c      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003bf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bf6:	d01b      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003bf8:	e011      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fced 	bl	80045e0 <RCCEx_PLL2_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c0a:	e012      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3324      	adds	r3, #36	; 0x24
 8003c10:	2102      	movs	r1, #2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fd96 	bl	8004744 <RCCEx_PLL3_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c1c:	e009      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
      break;
 8003c22:	e006      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003c24:	bf00      	nop
 8003c26:	e004      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003c28:	bf00      	nop
 8003c2a:	e002      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003c2c:	bf00      	nop
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c38:	4b8c      	ldr	r3, [pc, #560]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c46:	4989      	ldr	r1, [pc, #548]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	654b      	str	r3, [r1, #84]	; 0x54
 8003c4c:	e001      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d044      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c68:	d01b      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6e:	d805      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d022      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003c7a:	e01b      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	d01d      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003c82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c86:	d01c      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c8c:	d01b      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003c8e:	e011      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fca2 	bl	80045e0 <RCCEx_PLL2_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ca0:	e012      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3324      	adds	r3, #36	; 0x24
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fd4b 	bl	8004744 <RCCEx_PLL3_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003cb2:	e009      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb8:	e006      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e004      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cce:	4b67      	ldr	r3, [pc, #412]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cdc:	4963      	ldr	r1, [pc, #396]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	658b      	str	r3, [r1, #88]	; 0x58
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d044      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cfe:	d01b      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d04:	d805      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d022      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003d10:	e01b      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d16:	d01d      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003d18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d1c:	d01c      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003d1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d22:	d01b      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003d24:	e011      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fc57 	bl	80045e0 <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d36:	e012      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3324      	adds	r3, #36	; 0x24
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fd00 	bl	8004744 <RCCEx_PLL3_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d48:	e009      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4e:	e006      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003d50:	bf00      	nop
 8003d52:	e004      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003d54:	bf00      	nop
 8003d56:	e002      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d64:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d72:	493e      	ldr	r1, [pc, #248]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	658b      	str	r3, [r1, #88]	; 0x58
 8003d78:	e001      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d10a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3324      	adds	r3, #36	; 0x24
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fcd1 	bl	8004744 <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003dac:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dba:	492c      	ldr	r1, [pc, #176]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd6:	d10a      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3324      	adds	r3, #36	; 0x24
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fcb0 	bl	8004744 <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dee:	4b1f      	ldr	r3, [pc, #124]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfc:	491b      	ldr	r1, [pc, #108]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d032      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d00d      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e1e:	d016      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d111      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fbd8 	bl	80045e0 <RCCEx_PLL2_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e34:	e00c      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3324      	adds	r3, #36	; 0x24
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fc81 	bl	8004744 <RCCEx_PLL3_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e46:	e003      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e64:	4901      	ldr	r1, [pc, #4]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	658b      	str	r3, [r1, #88]	; 0x58
 8003e6a:	e003      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d02f      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003e8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e90:	d015      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e96:	d10f      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e98:	4b79      	ldr	r3, [pc, #484]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	4a78      	ldr	r2, [pc, #480]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3324      	adds	r3, #36	; 0x24
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fc49 	bl	8004744 <RCCEx_PLL3_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8003ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ec6:	4b6e      	ldr	r3, [pc, #440]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	496a      	ldr	r1, [pc, #424]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	654b      	str	r3, [r1, #84]	; 0x54
 8003eda:	e001      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d029      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d007      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003efa:	e00f      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003efc:	4b60      	ldr	r3, [pc, #384]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a5f      	ldr	r2, [pc, #380]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f08:	e00b      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2102      	movs	r1, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fb65 	bl	80045e0 <RCCEx_PLL2_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f28:	4b55      	ldr	r3, [pc, #340]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f34:	4952      	ldr	r1, [pc, #328]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f3a:	e001      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3324      	adds	r3, #36	; 0x24
 8003f50:	2102      	movs	r1, #2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fbf6 	bl	8004744 <RCCEx_PLL3_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d02f      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f76:	d00c      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7c:	d802      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d011      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003f82:	e00d      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f88:	d00f      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8e:	d00e      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003f90:	e006      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	4a3a      	ldr	r2, [pc, #232]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003f9e:	e007      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa4:	e004      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e002      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fb6:	4b32      	ldr	r3, [pc, #200]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc2:	492f      	ldr	r1, [pc, #188]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	654b      	str	r3, [r1, #84]	; 0x54
 8003fc8:	e001      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fda:	4b29      	ldr	r3, [pc, #164]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4926      	ldr	r1, [pc, #152]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ff8:	4b21      	ldr	r3, [pc, #132]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004006:	491e      	ldr	r1, [pc, #120]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004008:	4313      	orrs	r3, r2
 800400a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800401a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004024:	4916      	ldr	r1, [pc, #88]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00d      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	4a11      	ldr	r2, [pc, #68]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800403c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004040:	6113      	str	r3, [r2, #16]
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800404c:	490c      	ldr	r1, [pc, #48]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800404e:	4313      	orrs	r3, r2
 8004050:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da08      	bge.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	4906      	ldr	r1, [pc, #24]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004068:	4313      	orrs	r3, r2
 800406a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800406c:	7dbb      	ldrb	r3, [r7, #22]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	58024400 	.word	0x58024400

08004084 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004088:	f7ff f8b2 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 800408c:	4601      	mov	r1, r0
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800409a:	5cd3      	ldrb	r3, [r2, r3]
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	58024400 	.word	0x58024400
 80040ac:	08006a34 	.word	0x08006a34

080040b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040b8:	4b9d      	ldr	r3, [pc, #628]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80040c2:	4b9b      	ldr	r3, [pc, #620]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	0b1b      	lsrs	r3, r3, #12
 80040c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040ce:	4b98      	ldr	r3, [pc, #608]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80040da:	4b95      	ldr	r3, [pc, #596]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	08db      	lsrs	r3, r3, #3
 80040e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 810a 	beq.w	8004312 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d05a      	beq.n	80041ba <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004104:	2b01      	cmp	r3, #1
 8004106:	d302      	bcc.n	800410e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004108:	2b02      	cmp	r3, #2
 800410a:	d078      	beq.n	80041fe <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800410c:	e099      	b.n	8004242 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800410e:	4b88      	ldr	r3, [pc, #544]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02d      	beq.n	8004176 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800411a:	4b85      	ldr	r3, [pc, #532]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	08db      	lsrs	r3, r3, #3
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	4a83      	ldr	r2, [pc, #524]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004126:	fa22 f303 	lsr.w	r3, r2, r3
 800412a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004144:	4b7a      	ldr	r3, [pc, #488]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004154:	ed97 6a03 	vldr	s12, [r7, #12]
 8004158:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800415c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004164:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004170:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004174:	e087      	b.n	8004286 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	ee07 3a90 	vmov	s15, r3
 800417c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004180:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800433c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004188:	4b69      	ldr	r3, [pc, #420]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004190:	ee07 3a90 	vmov	s15, r3
 8004194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004198:	ed97 6a03 	vldr	s12, [r7, #12]
 800419c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80041a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041b8:	e065      	b.n	8004286 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80041c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041cc:	4b58      	ldr	r3, [pc, #352]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d4:	ee07 3a90 	vmov	s15, r3
 80041d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80041e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80041e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041fc:	e043      	b.n	8004286 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004208:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800420c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004210:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004220:	ed97 6a03 	vldr	s12, [r7, #12]
 8004224:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004240:	e021      	b.n	8004286 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	ee07 3a90 	vmov	s15, r3
 8004248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004254:	4b36      	ldr	r3, [pc, #216]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425c:	ee07 3a90 	vmov	s15, r3
 8004260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004264:	ed97 6a03 	vldr	s12, [r7, #12]
 8004268:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800426c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004280:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004284:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004286:	4b2a      	ldr	r3, [pc, #168]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	0a5b      	lsrs	r3, r3, #9
 800428c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004290:	ee07 3a90 	vmov	s15, r3
 8004294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800429c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80042a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ac:	ee17 2a90 	vmov	r2, s15
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80042b4:	4b1e      	ldr	r3, [pc, #120]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80042d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042da:	ee17 2a90 	vmov	r2, s15
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80042e2:	4b13      	ldr	r3, [pc, #76]	; (8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	0e1b      	lsrs	r3, r3, #24
 80042e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004308:	ee17 2a90 	vmov	r2, s15
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004310:	e008      	b.n	8004324 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	bf00      	nop
 8004326:	3724      	adds	r7, #36	; 0x24
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	58024400 	.word	0x58024400
 8004334:	03d09000 	.word	0x03d09000
 8004338:	46000000 	.word	0x46000000
 800433c:	4c742400 	.word	0x4c742400
 8004340:	4a742400 	.word	0x4a742400
 8004344:	4bbebc20 	.word	0x4bbebc20

08004348 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004348:	b480      	push	{r7}
 800434a:	b089      	sub	sp, #36	; 0x24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004350:	4b9d      	ldr	r3, [pc, #628]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800435a:	4b9b      	ldr	r3, [pc, #620]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	0d1b      	lsrs	r3, r3, #20
 8004360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004364:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004366:	4b98      	ldr	r3, [pc, #608]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004372:	4b95      	ldr	r3, [pc, #596]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	08db      	lsrs	r3, r3, #3
 8004378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 810a 	beq.w	80045aa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d05a      	beq.n	8004452 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800439c:	2b01      	cmp	r3, #1
 800439e:	d302      	bcc.n	80043a6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d078      	beq.n	8004496 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80043a4:	e099      	b.n	80044da <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a6:	4b88      	ldr	r3, [pc, #544]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d02d      	beq.n	800440e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043b2:	4b85      	ldr	r3, [pc, #532]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	08db      	lsrs	r3, r3, #3
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	4a83      	ldr	r2, [pc, #524]	; (80045cc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	ee07 3a90 	vmov	s15, r3
 80043d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043dc:	4b7a      	ldr	r3, [pc, #488]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80043f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80043f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004408:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800440c:	e087      	b.n	800451e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004418:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80045d4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800441c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004420:	4b69      	ldr	r3, [pc, #420]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004430:	ed97 6a03 	vldr	s12, [r7, #12]
 8004434:	eddf 5a66 	vldr	s11, [pc, #408]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004450:	e065      	b.n	800451e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004464:	4b58      	ldr	r3, [pc, #352]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446c:	ee07 3a90 	vmov	s15, r3
 8004470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004474:	ed97 6a03 	vldr	s12, [r7, #12]
 8004478:	eddf 5a55 	vldr	s11, [pc, #340]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800447c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004490:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004494:	e043      	b.n	800451e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	ee07 3a90 	vmov	s15, r3
 800449c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80044a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a8:	4b47      	ldr	r3, [pc, #284]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80044bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80044c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044d8:	e021      	b.n	800451e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80044e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004500:	eddf 5a33 	vldr	s11, [pc, #204]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004518:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800451c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800451e:	4b2a      	ldr	r3, [pc, #168]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	0a5b      	lsrs	r3, r3, #9
 8004524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004534:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004538:	edd7 6a07 	vldr	s13, [r7, #28]
 800453c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004544:	ee17 2a90 	vmov	r2, s15
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004566:	edd7 6a07 	vldr	s13, [r7, #28]
 800456a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004572:	ee17 2a90 	vmov	r2, s15
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	0e1b      	lsrs	r3, r3, #24
 8004580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004594:	edd7 6a07 	vldr	s13, [r7, #28]
 8004598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a0:	ee17 2a90 	vmov	r2, s15
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045a8:	e008      	b.n	80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	3724      	adds	r7, #36	; 0x24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	58024400 	.word	0x58024400
 80045cc:	03d09000 	.word	0x03d09000
 80045d0:	46000000 	.word	0x46000000
 80045d4:	4c742400 	.word	0x4c742400
 80045d8:	4a742400 	.word	0x4a742400
 80045dc:	4bbebc20 	.word	0x4bbebc20

080045e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045ee:	4b53      	ldr	r3, [pc, #332]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d101      	bne.n	80045fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e099      	b.n	8004732 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045fe:	4b4f      	ldr	r3, [pc, #316]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a4e      	ldr	r2, [pc, #312]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460a:	f7fc ffa5 	bl	8001558 <HAL_GetTick>
 800460e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004610:	e008      	b.n	8004624 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004612:	f7fc ffa1 	bl	8001558 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e086      	b.n	8004732 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004624:	4b45      	ldr	r3, [pc, #276]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	031b      	lsls	r3, r3, #12
 800463e:	493f      	ldr	r1, [pc, #252]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004640:	4313      	orrs	r3, r2
 8004642:	628b      	str	r3, [r1, #40]	; 0x28
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	3b01      	subs	r3, #1
 800464a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	3b01      	subs	r3, #1
 8004654:	025b      	lsls	r3, r3, #9
 8004656:	b29b      	uxth	r3, r3
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	3b01      	subs	r3, #1
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	3b01      	subs	r3, #1
 800466e:	061b      	lsls	r3, r3, #24
 8004670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004674:	4931      	ldr	r1, [pc, #196]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800467a:	4b30      	ldr	r3, [pc, #192]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	492d      	ldr	r1, [pc, #180]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004688:	4313      	orrs	r3, r2
 800468a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800468c:	4b2b      	ldr	r3, [pc, #172]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	f023 0220 	bic.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	4928      	ldr	r1, [pc, #160]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800469e:	4b27      	ldr	r3, [pc, #156]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	4a26      	ldr	r2, [pc, #152]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046a4:	f023 0310 	bic.w	r3, r3, #16
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ae:	4b24      	ldr	r3, [pc, #144]	; (8004740 <RCCEx_PLL2_Config+0x160>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	69d2      	ldr	r2, [r2, #28]
 80046b6:	00d2      	lsls	r2, r2, #3
 80046b8:	4920      	ldr	r1, [pc, #128]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046be:	4b1f      	ldr	r3, [pc, #124]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	4a1e      	ldr	r2, [pc, #120]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046c4:	f043 0310 	orr.w	r3, r3, #16
 80046c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046dc:	e00f      	b.n	80046fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046e4:	4b15      	ldr	r3, [pc, #84]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4a14      	ldr	r2, [pc, #80]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046f0:	e005      	b.n	80046fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	4a11      	ldr	r2, [pc, #68]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a0e      	ldr	r2, [pc, #56]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470a:	f7fc ff25 	bl	8001558 <HAL_GetTick>
 800470e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004710:	e008      	b.n	8004724 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004712:	f7fc ff21 	bl	8001558 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e006      	b.n	8004732 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400
 8004740:	ffff0007 	.word	0xffff0007

08004744 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004752:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b03      	cmp	r3, #3
 800475c:	d101      	bne.n	8004762 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e099      	b.n	8004896 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004762:	4b4f      	ldr	r3, [pc, #316]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a4e      	ldr	r2, [pc, #312]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476e:	f7fc fef3 	bl	8001558 <HAL_GetTick>
 8004772:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004774:	e008      	b.n	8004788 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004776:	f7fc feef 	bl	8001558 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e086      	b.n	8004896 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004788:	4b45      	ldr	r3, [pc, #276]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004794:	4b42      	ldr	r3, [pc, #264]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	051b      	lsls	r3, r3, #20
 80047a2:	493f      	ldr	r1, [pc, #252]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	628b      	str	r3, [r1, #40]	; 0x28
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	025b      	lsls	r3, r3, #9
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047d8:	4931      	ldr	r1, [pc, #196]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047de:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	492d      	ldr	r1, [pc, #180]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047f0:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	4928      	ldr	r1, [pc, #160]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004802:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <RCCEx_PLL3_Config+0x160>)
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	69d2      	ldr	r2, [r2, #28]
 800481a:	00d2      	lsls	r2, r2, #3
 800481c:	4920      	ldr	r1, [pc, #128]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004822:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4a19      	ldr	r2, [pc, #100]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800483a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800483e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004840:	e00f      	b.n	8004862 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d106      	bne.n	8004856 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800484e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004854:	e005      	b.n	8004862 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800485c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004860:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486e:	f7fc fe73 	bl	8001558 <HAL_GetTick>
 8004872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004874:	e008      	b.n	8004888 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004876:	f7fc fe6f 	bl	8001558 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	58024400 	.word	0x58024400
 80048a4:	ffff0007 	.word	0xffff0007

080048a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e042      	b.n	8004940 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d106      	bne.n	80048d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fc faa7 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2224      	movs	r2, #36	; 0x24
 80048d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f8c2 	bl	8004a74 <UART_SetConfig>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e022      	b.n	8004940 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fe66 	bl	80055d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 feed 	bl	8005718 <UART_CheckIdleState>
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495e:	2b20      	cmp	r3, #32
 8004960:	f040 8083 	bne.w	8004a6a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Transmit+0x28>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e07b      	b.n	8004a6c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_UART_Transmit+0x3a>
 800497e:	2302      	movs	r3, #2
 8004980:	e074      	b.n	8004a6c <HAL_UART_Transmit+0x124>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2221      	movs	r2, #33	; 0x21
 8004996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800499a:	f7fc fddd 	bl	8001558 <HAL_GetTick>
 800499e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	88fa      	ldrh	r2, [r7, #6]
 80049a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b8:	d108      	bne.n	80049cc <HAL_UART_Transmit+0x84>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e003      	b.n	80049d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80049dc:	e02c      	b.n	8004a38 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	2180      	movs	r1, #128	; 0x80
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fedd 	bl	80057a8 <UART_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e039      	b.n	8004a6c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	3302      	adds	r3, #2
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	e007      	b.n	8004a26 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1cc      	bne.n	80049de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 feaa 	bl	80057a8 <UART_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e006      	b.n	8004a6c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a78:	b08e      	sub	sp, #56	; 0x38
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4bc1      	ldr	r3, [pc, #772]	; (8004db4 <UART_SetConfig+0x340>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4ab7      	ldr	r2, [pc, #732]	; (8004db8 <UART_SetConfig+0x344>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	4bb2      	ldr	r3, [pc, #712]	; (8004dbc <UART_SetConfig+0x348>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004afa:	430b      	orrs	r3, r1
 8004afc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	f023 010f 	bic.w	r1, r3, #15
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4aa9      	ldr	r2, [pc, #676]	; (8004dc0 <UART_SetConfig+0x34c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d177      	bne.n	8004c0e <UART_SetConfig+0x19a>
 8004b1e:	4ba9      	ldr	r3, [pc, #676]	; (8004dc4 <UART_SetConfig+0x350>)
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b26:	2b28      	cmp	r3, #40	; 0x28
 8004b28:	d86c      	bhi.n	8004c04 <UART_SetConfig+0x190>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0xbc>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004bd5 	.word	0x08004bd5
 8004b34:	08004c05 	.word	0x08004c05
 8004b38:	08004c05 	.word	0x08004c05
 8004b3c:	08004c05 	.word	0x08004c05
 8004b40:	08004c05 	.word	0x08004c05
 8004b44:	08004c05 	.word	0x08004c05
 8004b48:	08004c05 	.word	0x08004c05
 8004b4c:	08004c05 	.word	0x08004c05
 8004b50:	08004bdd 	.word	0x08004bdd
 8004b54:	08004c05 	.word	0x08004c05
 8004b58:	08004c05 	.word	0x08004c05
 8004b5c:	08004c05 	.word	0x08004c05
 8004b60:	08004c05 	.word	0x08004c05
 8004b64:	08004c05 	.word	0x08004c05
 8004b68:	08004c05 	.word	0x08004c05
 8004b6c:	08004c05 	.word	0x08004c05
 8004b70:	08004be5 	.word	0x08004be5
 8004b74:	08004c05 	.word	0x08004c05
 8004b78:	08004c05 	.word	0x08004c05
 8004b7c:	08004c05 	.word	0x08004c05
 8004b80:	08004c05 	.word	0x08004c05
 8004b84:	08004c05 	.word	0x08004c05
 8004b88:	08004c05 	.word	0x08004c05
 8004b8c:	08004c05 	.word	0x08004c05
 8004b90:	08004bed 	.word	0x08004bed
 8004b94:	08004c05 	.word	0x08004c05
 8004b98:	08004c05 	.word	0x08004c05
 8004b9c:	08004c05 	.word	0x08004c05
 8004ba0:	08004c05 	.word	0x08004c05
 8004ba4:	08004c05 	.word	0x08004c05
 8004ba8:	08004c05 	.word	0x08004c05
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004bf5 	.word	0x08004bf5
 8004bb4:	08004c05 	.word	0x08004c05
 8004bb8:	08004c05 	.word	0x08004c05
 8004bbc:	08004c05 	.word	0x08004c05
 8004bc0:	08004c05 	.word	0x08004c05
 8004bc4:	08004c05 	.word	0x08004c05
 8004bc8:	08004c05 	.word	0x08004c05
 8004bcc:	08004c05 	.word	0x08004c05
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bda:	e233      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004be2:	e22f      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004be4:	2308      	movs	r3, #8
 8004be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bea:	e22b      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004bec:	2310      	movs	r3, #16
 8004bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bf2:	e227      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004bf4:	2320      	movs	r3, #32
 8004bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bfa:	e223      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004bfc:	2340      	movs	r3, #64	; 0x40
 8004bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c02:	e21f      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0a:	bf00      	nop
 8004c0c:	e21a      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6d      	ldr	r2, [pc, #436]	; (8004dc8 <UART_SetConfig+0x354>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d132      	bne.n	8004c7e <UART_SetConfig+0x20a>
 8004c18:	4b6a      	ldr	r3, [pc, #424]	; (8004dc4 <UART_SetConfig+0x350>)
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	2b05      	cmp	r3, #5
 8004c22:	d827      	bhi.n	8004c74 <UART_SetConfig+0x200>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0x1b8>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c45 	.word	0x08004c45
 8004c30:	08004c4d 	.word	0x08004c4d
 8004c34:	08004c55 	.word	0x08004c55
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c4a:	e1fb      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c52:	e1f7      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004c54:	2308      	movs	r3, #8
 8004c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c5a:	e1f3      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c62:	e1ef      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004c64:	2320      	movs	r3, #32
 8004c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c6a:	e1eb      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004c6c:	2340      	movs	r3, #64	; 0x40
 8004c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c72:	e1e7      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c7a:	bf00      	nop
 8004c7c:	e1e2      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a52      	ldr	r2, [pc, #328]	; (8004dcc <UART_SetConfig+0x358>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d132      	bne.n	8004cee <UART_SetConfig+0x27a>
 8004c88:	4b4e      	ldr	r3, [pc, #312]	; (8004dc4 <UART_SetConfig+0x350>)
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	d827      	bhi.n	8004ce4 <UART_SetConfig+0x270>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <UART_SetConfig+0x228>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cb5 	.word	0x08004cb5
 8004ca0:	08004cbd 	.word	0x08004cbd
 8004ca4:	08004cc5 	.word	0x08004cc5
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004cdd 	.word	0x08004cdd
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cba:	e1c3      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cc2:	e1bf      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cca:	e1bb      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cd2:	e1b7      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cda:	e1b3      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce2:	e1af      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cea:	bf00      	nop
 8004cec:	e1aa      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a37      	ldr	r2, [pc, #220]	; (8004dd0 <UART_SetConfig+0x35c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d132      	bne.n	8004d5e <UART_SetConfig+0x2ea>
 8004cf8:	4b32      	ldr	r3, [pc, #200]	; (8004dc4 <UART_SetConfig+0x350>)
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d827      	bhi.n	8004d54 <UART_SetConfig+0x2e0>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <UART_SetConfig+0x298>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d25 	.word	0x08004d25
 8004d10:	08004d2d 	.word	0x08004d2d
 8004d14:	08004d35 	.word	0x08004d35
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d45 	.word	0x08004d45
 8004d20:	08004d4d 	.word	0x08004d4d
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d2a:	e18b      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d32:	e187      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004d34:	2308      	movs	r3, #8
 8004d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d3a:	e183      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d42:	e17f      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004d44:	2320      	movs	r3, #32
 8004d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d4a:	e17b      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004d4c:	2340      	movs	r3, #64	; 0x40
 8004d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d52:	e177      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d5a:	bf00      	nop
 8004d5c:	e172      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1c      	ldr	r2, [pc, #112]	; (8004dd4 <UART_SetConfig+0x360>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d144      	bne.n	8004df2 <UART_SetConfig+0x37e>
 8004d68:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <UART_SetConfig+0x350>)
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	d839      	bhi.n	8004de8 <UART_SetConfig+0x374>
 8004d74:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <UART_SetConfig+0x308>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004d95 	.word	0x08004d95
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	08004da5 	.word	0x08004da5
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004dd9 	.word	0x08004dd9
 8004d90:	08004de1 	.word	0x08004de1
 8004d94:	2300      	movs	r3, #0
 8004d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d9a:	e153      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004da2:	e14f      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004daa:	e14b      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004db2:	e147      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004db4:	cfff69f3 	.word	0xcfff69f3
 8004db8:	58000c00 	.word	0x58000c00
 8004dbc:	11fff4ff 	.word	0x11fff4ff
 8004dc0:	40011000 	.word	0x40011000
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	40004400 	.word	0x40004400
 8004dcc:	40004800 	.word	0x40004800
 8004dd0:	40004c00 	.word	0x40004c00
 8004dd4:	40005000 	.word	0x40005000
 8004dd8:	2320      	movs	r3, #32
 8004dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dde:	e131      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004de6:	e12d      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dee:	bf00      	nop
 8004df0:	e128      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4ab6      	ldr	r2, [pc, #728]	; (80050d0 <UART_SetConfig+0x65c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d178      	bne.n	8004eee <UART_SetConfig+0x47a>
 8004dfc:	4bb5      	ldr	r3, [pc, #724]	; (80050d4 <UART_SetConfig+0x660>)
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e04:	2b28      	cmp	r3, #40	; 0x28
 8004e06:	d86d      	bhi.n	8004ee4 <UART_SetConfig+0x470>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <UART_SetConfig+0x39c>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004eb5 	.word	0x08004eb5
 8004e14:	08004ee5 	.word	0x08004ee5
 8004e18:	08004ee5 	.word	0x08004ee5
 8004e1c:	08004ee5 	.word	0x08004ee5
 8004e20:	08004ee5 	.word	0x08004ee5
 8004e24:	08004ee5 	.word	0x08004ee5
 8004e28:	08004ee5 	.word	0x08004ee5
 8004e2c:	08004ee5 	.word	0x08004ee5
 8004e30:	08004ebd 	.word	0x08004ebd
 8004e34:	08004ee5 	.word	0x08004ee5
 8004e38:	08004ee5 	.word	0x08004ee5
 8004e3c:	08004ee5 	.word	0x08004ee5
 8004e40:	08004ee5 	.word	0x08004ee5
 8004e44:	08004ee5 	.word	0x08004ee5
 8004e48:	08004ee5 	.word	0x08004ee5
 8004e4c:	08004ee5 	.word	0x08004ee5
 8004e50:	08004ec5 	.word	0x08004ec5
 8004e54:	08004ee5 	.word	0x08004ee5
 8004e58:	08004ee5 	.word	0x08004ee5
 8004e5c:	08004ee5 	.word	0x08004ee5
 8004e60:	08004ee5 	.word	0x08004ee5
 8004e64:	08004ee5 	.word	0x08004ee5
 8004e68:	08004ee5 	.word	0x08004ee5
 8004e6c:	08004ee5 	.word	0x08004ee5
 8004e70:	08004ecd 	.word	0x08004ecd
 8004e74:	08004ee5 	.word	0x08004ee5
 8004e78:	08004ee5 	.word	0x08004ee5
 8004e7c:	08004ee5 	.word	0x08004ee5
 8004e80:	08004ee5 	.word	0x08004ee5
 8004e84:	08004ee5 	.word	0x08004ee5
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004ee5 	.word	0x08004ee5
 8004e90:	08004ed5 	.word	0x08004ed5
 8004e94:	08004ee5 	.word	0x08004ee5
 8004e98:	08004ee5 	.word	0x08004ee5
 8004e9c:	08004ee5 	.word	0x08004ee5
 8004ea0:	08004ee5 	.word	0x08004ee5
 8004ea4:	08004ee5 	.word	0x08004ee5
 8004ea8:	08004ee5 	.word	0x08004ee5
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004edd 	.word	0x08004edd
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eba:	e0c3      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ec2:	e0bf      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eca:	e0bb      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ed2:	e0b7      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eda:	e0b3      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004edc:	2340      	movs	r3, #64	; 0x40
 8004ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ee2:	e0af      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eea:	bf00      	nop
 8004eec:	e0aa      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a79      	ldr	r2, [pc, #484]	; (80050d8 <UART_SetConfig+0x664>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d132      	bne.n	8004f5e <UART_SetConfig+0x4ea>
 8004ef8:	4b76      	ldr	r3, [pc, #472]	; (80050d4 <UART_SetConfig+0x660>)
 8004efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	2b05      	cmp	r3, #5
 8004f02:	d827      	bhi.n	8004f54 <UART_SetConfig+0x4e0>
 8004f04:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <UART_SetConfig+0x498>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f25 	.word	0x08004f25
 8004f10:	08004f2d 	.word	0x08004f2d
 8004f14:	08004f35 	.word	0x08004f35
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	2300      	movs	r3, #0
 8004f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f2a:	e08b      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f32:	e087      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004f34:	2308      	movs	r3, #8
 8004f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f3a:	e083      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f42:	e07f      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004f44:	2320      	movs	r3, #32
 8004f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f4a:	e07b      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004f4c:	2340      	movs	r3, #64	; 0x40
 8004f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f52:	e077      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f5a:	bf00      	nop
 8004f5c:	e072      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a5e      	ldr	r2, [pc, #376]	; (80050dc <UART_SetConfig+0x668>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d132      	bne.n	8004fce <UART_SetConfig+0x55a>
 8004f68:	4b5a      	ldr	r3, [pc, #360]	; (80050d4 <UART_SetConfig+0x660>)
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	2b05      	cmp	r3, #5
 8004f72:	d827      	bhi.n	8004fc4 <UART_SetConfig+0x550>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x508>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004f95 	.word	0x08004f95
 8004f80:	08004f9d 	.word	0x08004f9d
 8004f84:	08004fa5 	.word	0x08004fa5
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	2300      	movs	r3, #0
 8004f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f9a:	e053      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fa2:	e04f      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004faa:	e04b      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fb2:	e047      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fba:	e043      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004fbc:	2340      	movs	r3, #64	; 0x40
 8004fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fc2:	e03f      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fca:	bf00      	nop
 8004fcc:	e03a      	b.n	8005044 <UART_SetConfig+0x5d0>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a43      	ldr	r2, [pc, #268]	; (80050e0 <UART_SetConfig+0x66c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d132      	bne.n	800503e <UART_SetConfig+0x5ca>
 8004fd8:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <UART_SetConfig+0x660>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	d827      	bhi.n	8005034 <UART_SetConfig+0x5c0>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <UART_SetConfig+0x578>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005005 	.word	0x08005005
 8004ff0:	0800500d 	.word	0x0800500d
 8004ff4:	08005015 	.word	0x08005015
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005025 	.word	0x08005025
 8005000:	0800502d 	.word	0x0800502d
 8005004:	2302      	movs	r3, #2
 8005006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800500a:	e01b      	b.n	8005044 <UART_SetConfig+0x5d0>
 800500c:	2304      	movs	r3, #4
 800500e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005012:	e017      	b.n	8005044 <UART_SetConfig+0x5d0>
 8005014:	2308      	movs	r3, #8
 8005016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800501a:	e013      	b.n	8005044 <UART_SetConfig+0x5d0>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005022:	e00f      	b.n	8005044 <UART_SetConfig+0x5d0>
 8005024:	2320      	movs	r3, #32
 8005026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502a:	e00b      	b.n	8005044 <UART_SetConfig+0x5d0>
 800502c:	2340      	movs	r3, #64	; 0x40
 800502e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005032:	e007      	b.n	8005044 <UART_SetConfig+0x5d0>
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <UART_SetConfig+0x5d0>
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a25      	ldr	r2, [pc, #148]	; (80050e0 <UART_SetConfig+0x66c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	f040 80b8 	bne.w	80051c0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005050:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005054:	2b08      	cmp	r3, #8
 8005056:	d019      	beq.n	800508c <UART_SetConfig+0x618>
 8005058:	2b08      	cmp	r3, #8
 800505a:	dc04      	bgt.n	8005066 <UART_SetConfig+0x5f2>
 800505c:	2b02      	cmp	r3, #2
 800505e:	d009      	beq.n	8005074 <UART_SetConfig+0x600>
 8005060:	2b04      	cmp	r3, #4
 8005062:	d00b      	beq.n	800507c <UART_SetConfig+0x608>
 8005064:	e042      	b.n	80050ec <UART_SetConfig+0x678>
 8005066:	2b20      	cmp	r3, #32
 8005068:	d02b      	beq.n	80050c2 <UART_SetConfig+0x64e>
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d02c      	beq.n	80050c8 <UART_SetConfig+0x654>
 800506e:	2b10      	cmp	r3, #16
 8005070:	d014      	beq.n	800509c <UART_SetConfig+0x628>
 8005072:	e03b      	b.n	80050ec <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005074:	f7ff f806 	bl	8004084 <HAL_RCCEx_GetD3PCLK1Freq>
 8005078:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800507a:	e03d      	b.n	80050f8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff f815 	bl	80040b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800508a:	e035      	b.n	80050f8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800508c:	f107 0308 	add.w	r3, r7, #8
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff f959 	bl	8004348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800509a:	e02d      	b.n	80050f8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <UART_SetConfig+0x660>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <UART_SetConfig+0x660>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	08db      	lsrs	r3, r3, #3
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <UART_SetConfig+0x670>)
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050ba:	e01d      	b.n	80050f8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <UART_SetConfig+0x670>)
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050c0:	e01a      	b.n	80050f8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <UART_SetConfig+0x674>)
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050c6:	e017      	b.n	80050f8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050ce:	e013      	b.n	80050f8 <UART_SetConfig+0x684>
 80050d0:	40011400 	.word	0x40011400
 80050d4:	58024400 	.word	0x58024400
 80050d8:	40007800 	.word	0x40007800
 80050dc:	40007c00 	.word	0x40007c00
 80050e0:	58000c00 	.word	0x58000c00
 80050e4:	03d09000 	.word	0x03d09000
 80050e8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80050f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 824d 	beq.w	800559a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	4aad      	ldr	r2, [pc, #692]	; (80053bc <UART_SetConfig+0x948>)
 8005106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800510a:	461a      	mov	r2, r3
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005112:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4413      	add	r3, r2
 800511e:	6a3a      	ldr	r2, [r7, #32]
 8005120:	429a      	cmp	r2, r3
 8005122:	d305      	bcc.n	8005130 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800512a:	6a3a      	ldr	r2, [r7, #32]
 800512c:	429a      	cmp	r2, r3
 800512e:	d903      	bls.n	8005138 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005136:	e230      	b.n	800559a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	4618      	mov	r0, r3
 800513c:	f04f 0100 	mov.w	r1, #0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	4a9d      	ldr	r2, [pc, #628]	; (80053bc <UART_SetConfig+0x948>)
 8005146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f04f 0400 	mov.w	r4, #0
 8005150:	461a      	mov	r2, r3
 8005152:	4623      	mov	r3, r4
 8005154:	f7fb f914 	bl	8000380 <__aeabi_uldivmod>
 8005158:	4603      	mov	r3, r0
 800515a:	460c      	mov	r4, r1
 800515c:	4619      	mov	r1, r3
 800515e:	4622      	mov	r2, r4
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	f04f 0400 	mov.w	r4, #0
 8005168:	0214      	lsls	r4, r2, #8
 800516a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800516e:	020b      	lsls	r3, r1, #8
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6852      	ldr	r2, [r2, #4]
 8005174:	0852      	lsrs	r2, r2, #1
 8005176:	4611      	mov	r1, r2
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	eb13 0b01 	adds.w	fp, r3, r1
 8005180:	eb44 0c02 	adc.w	ip, r4, r2
 8005184:	4658      	mov	r0, fp
 8005186:	4661      	mov	r1, ip
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f04f 0400 	mov.w	r4, #0
 8005190:	461a      	mov	r2, r3
 8005192:	4623      	mov	r3, r4
 8005194:	f7fb f8f4 	bl	8000380 <__aeabi_uldivmod>
 8005198:	4603      	mov	r3, r0
 800519a:	460c      	mov	r4, r1
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a4:	d308      	bcc.n	80051b8 <UART_SetConfig+0x744>
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ac:	d204      	bcs.n	80051b8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b4:	60da      	str	r2, [r3, #12]
 80051b6:	e1f0      	b.n	800559a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80051be:	e1ec      	b.n	800559a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c8:	f040 8100 	bne.w	80053cc <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80051cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051d0:	2b40      	cmp	r3, #64	; 0x40
 80051d2:	f200 80b7 	bhi.w	8005344 <UART_SetConfig+0x8d0>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <UART_SetConfig+0x768>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	080052e1 	.word	0x080052e1
 80051e0:	080052e9 	.word	0x080052e9
 80051e4:	08005345 	.word	0x08005345
 80051e8:	08005345 	.word	0x08005345
 80051ec:	080052f1 	.word	0x080052f1
 80051f0:	08005345 	.word	0x08005345
 80051f4:	08005345 	.word	0x08005345
 80051f8:	08005345 	.word	0x08005345
 80051fc:	08005301 	.word	0x08005301
 8005200:	08005345 	.word	0x08005345
 8005204:	08005345 	.word	0x08005345
 8005208:	08005345 	.word	0x08005345
 800520c:	08005345 	.word	0x08005345
 8005210:	08005345 	.word	0x08005345
 8005214:	08005345 	.word	0x08005345
 8005218:	08005345 	.word	0x08005345
 800521c:	08005311 	.word	0x08005311
 8005220:	08005345 	.word	0x08005345
 8005224:	08005345 	.word	0x08005345
 8005228:	08005345 	.word	0x08005345
 800522c:	08005345 	.word	0x08005345
 8005230:	08005345 	.word	0x08005345
 8005234:	08005345 	.word	0x08005345
 8005238:	08005345 	.word	0x08005345
 800523c:	08005345 	.word	0x08005345
 8005240:	08005345 	.word	0x08005345
 8005244:	08005345 	.word	0x08005345
 8005248:	08005345 	.word	0x08005345
 800524c:	08005345 	.word	0x08005345
 8005250:	08005345 	.word	0x08005345
 8005254:	08005345 	.word	0x08005345
 8005258:	08005345 	.word	0x08005345
 800525c:	08005337 	.word	0x08005337
 8005260:	08005345 	.word	0x08005345
 8005264:	08005345 	.word	0x08005345
 8005268:	08005345 	.word	0x08005345
 800526c:	08005345 	.word	0x08005345
 8005270:	08005345 	.word	0x08005345
 8005274:	08005345 	.word	0x08005345
 8005278:	08005345 	.word	0x08005345
 800527c:	08005345 	.word	0x08005345
 8005280:	08005345 	.word	0x08005345
 8005284:	08005345 	.word	0x08005345
 8005288:	08005345 	.word	0x08005345
 800528c:	08005345 	.word	0x08005345
 8005290:	08005345 	.word	0x08005345
 8005294:	08005345 	.word	0x08005345
 8005298:	08005345 	.word	0x08005345
 800529c:	08005345 	.word	0x08005345
 80052a0:	08005345 	.word	0x08005345
 80052a4:	08005345 	.word	0x08005345
 80052a8:	08005345 	.word	0x08005345
 80052ac:	08005345 	.word	0x08005345
 80052b0:	08005345 	.word	0x08005345
 80052b4:	08005345 	.word	0x08005345
 80052b8:	08005345 	.word	0x08005345
 80052bc:	08005345 	.word	0x08005345
 80052c0:	08005345 	.word	0x08005345
 80052c4:	08005345 	.word	0x08005345
 80052c8:	08005345 	.word	0x08005345
 80052cc:	08005345 	.word	0x08005345
 80052d0:	08005345 	.word	0x08005345
 80052d4:	08005345 	.word	0x08005345
 80052d8:	08005345 	.word	0x08005345
 80052dc:	0800533d 	.word	0x0800533d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fd ffb6 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 80052e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052e6:	e033      	b.n	8005350 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e8:	f7fd ffc8 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 80052ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052ee:	e02f      	b.n	8005350 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fe fedb 	bl	80040b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052fe:	e027      	b.n	8005350 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff f81f 	bl	8004348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800530e:	e01f      	b.n	8005350 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <UART_SetConfig+0x94c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <UART_SetConfig+0x94c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	08db      	lsrs	r3, r3, #3
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	4a27      	ldr	r2, [pc, #156]	; (80053c4 <UART_SetConfig+0x950>)
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800532e:	e00f      	b.n	8005350 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005330:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <UART_SetConfig+0x950>)
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005334:	e00c      	b.n	8005350 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <UART_SetConfig+0x954>)
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800533a:	e009      	b.n	8005350 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005342:	e005      	b.n	8005350 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800534e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8121 	beq.w	800559a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	4a17      	ldr	r2, [pc, #92]	; (80053bc <UART_SetConfig+0x948>)
 800535e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005362:	461a      	mov	r2, r3
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	fbb3 f3f2 	udiv	r3, r3, r2
 800536a:	005a      	lsls	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	441a      	add	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	fbb2 f3f3 	udiv	r3, r2, r3
 800537c:	b29b      	uxth	r3, r3
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	2b0f      	cmp	r3, #15
 8005384:	d916      	bls.n	80053b4 <UART_SetConfig+0x940>
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538c:	d212      	bcs.n	80053b4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	b29b      	uxth	r3, r3
 8005392:	f023 030f 	bic.w	r3, r3, #15
 8005396:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	b29b      	uxth	r3, r3
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053a6:	4313      	orrs	r3, r2
 80053a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	e0f2      	b.n	800559a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80053ba:	e0ee      	b.n	800559a <UART_SetConfig+0xb26>
 80053bc:	08006a44 	.word	0x08006a44
 80053c0:	58024400 	.word	0x58024400
 80053c4:	03d09000 	.word	0x03d09000
 80053c8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80053cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	f200 80b7 	bhi.w	8005544 <UART_SetConfig+0xad0>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <UART_SetConfig+0x968>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	080054e1 	.word	0x080054e1
 80053e0:	080054e9 	.word	0x080054e9
 80053e4:	08005545 	.word	0x08005545
 80053e8:	08005545 	.word	0x08005545
 80053ec:	080054f1 	.word	0x080054f1
 80053f0:	08005545 	.word	0x08005545
 80053f4:	08005545 	.word	0x08005545
 80053f8:	08005545 	.word	0x08005545
 80053fc:	08005501 	.word	0x08005501
 8005400:	08005545 	.word	0x08005545
 8005404:	08005545 	.word	0x08005545
 8005408:	08005545 	.word	0x08005545
 800540c:	08005545 	.word	0x08005545
 8005410:	08005545 	.word	0x08005545
 8005414:	08005545 	.word	0x08005545
 8005418:	08005545 	.word	0x08005545
 800541c:	08005511 	.word	0x08005511
 8005420:	08005545 	.word	0x08005545
 8005424:	08005545 	.word	0x08005545
 8005428:	08005545 	.word	0x08005545
 800542c:	08005545 	.word	0x08005545
 8005430:	08005545 	.word	0x08005545
 8005434:	08005545 	.word	0x08005545
 8005438:	08005545 	.word	0x08005545
 800543c:	08005545 	.word	0x08005545
 8005440:	08005545 	.word	0x08005545
 8005444:	08005545 	.word	0x08005545
 8005448:	08005545 	.word	0x08005545
 800544c:	08005545 	.word	0x08005545
 8005450:	08005545 	.word	0x08005545
 8005454:	08005545 	.word	0x08005545
 8005458:	08005545 	.word	0x08005545
 800545c:	08005537 	.word	0x08005537
 8005460:	08005545 	.word	0x08005545
 8005464:	08005545 	.word	0x08005545
 8005468:	08005545 	.word	0x08005545
 800546c:	08005545 	.word	0x08005545
 8005470:	08005545 	.word	0x08005545
 8005474:	08005545 	.word	0x08005545
 8005478:	08005545 	.word	0x08005545
 800547c:	08005545 	.word	0x08005545
 8005480:	08005545 	.word	0x08005545
 8005484:	08005545 	.word	0x08005545
 8005488:	08005545 	.word	0x08005545
 800548c:	08005545 	.word	0x08005545
 8005490:	08005545 	.word	0x08005545
 8005494:	08005545 	.word	0x08005545
 8005498:	08005545 	.word	0x08005545
 800549c:	08005545 	.word	0x08005545
 80054a0:	08005545 	.word	0x08005545
 80054a4:	08005545 	.word	0x08005545
 80054a8:	08005545 	.word	0x08005545
 80054ac:	08005545 	.word	0x08005545
 80054b0:	08005545 	.word	0x08005545
 80054b4:	08005545 	.word	0x08005545
 80054b8:	08005545 	.word	0x08005545
 80054bc:	08005545 	.word	0x08005545
 80054c0:	08005545 	.word	0x08005545
 80054c4:	08005545 	.word	0x08005545
 80054c8:	08005545 	.word	0x08005545
 80054cc:	08005545 	.word	0x08005545
 80054d0:	08005545 	.word	0x08005545
 80054d4:	08005545 	.word	0x08005545
 80054d8:	08005545 	.word	0x08005545
 80054dc:	0800553d 	.word	0x0800553d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e0:	f7fd feb6 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 80054e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80054e6:	e033      	b.n	8005550 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e8:	f7fd fec8 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 80054ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80054ee:	e02f      	b.n	8005550 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054f0:	f107 0314 	add.w	r3, r7, #20
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fddb 	bl	80040b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054fe:	e027      	b.n	8005550 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005500:	f107 0308 	add.w	r3, r7, #8
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe ff1f 	bl	8004348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800550e:	e01f      	b.n	8005550 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005510:	4b2c      	ldr	r3, [pc, #176]	; (80055c4 <UART_SetConfig+0xb50>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800551c:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <UART_SetConfig+0xb50>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	4a28      	ldr	r2, [pc, #160]	; (80055c8 <UART_SetConfig+0xb54>)
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800552e:	e00f      	b.n	8005550 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <UART_SetConfig+0xb54>)
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005534:	e00c      	b.n	8005550 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005536:	4b25      	ldr	r3, [pc, #148]	; (80055cc <UART_SetConfig+0xb58>)
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800553a:	e009      	b.n	8005550 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005542:	e005      	b.n	8005550 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800554e:	bf00      	nop
    }

    if (pclk != 0U)
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d021      	beq.n	800559a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <UART_SetConfig+0xb5c>)
 800555c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005560:	461a      	mov	r2, r3
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	fbb3 f2f2 	udiv	r2, r3, r2
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	085b      	lsrs	r3, r3, #1
 800556e:	441a      	add	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	b29b      	uxth	r3, r3
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	2b0f      	cmp	r3, #15
 8005580:	d908      	bls.n	8005594 <UART_SetConfig+0xb20>
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d204      	bcs.n	8005594 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005590:	60da      	str	r2, [r3, #12]
 8005592:	e002      	b.n	800559a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80055b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3738      	adds	r7, #56	; 0x38
 80055be:	46bd      	mov	sp, r7
 80055c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80055c4:	58024400 	.word	0x58024400
 80055c8:	03d09000 	.word	0x03d09000
 80055cc:	003d0900 	.word	0x003d0900
 80055d0:	08006a44 	.word	0x08006a44

080055d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01a      	beq.n	80056ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d2:	d10a      	bne.n	80056ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	605a      	str	r2, [r3, #4]
  }
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af02      	add	r7, sp, #8
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005728:	f7fb ff16 	bl	8001558 <HAL_GetTick>
 800572c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d10e      	bne.n	800575a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800573c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f82c 	bl	80057a8 <UART_WaitOnFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e022      	b.n	80057a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b04      	cmp	r3, #4
 8005766:	d10e      	bne.n	8005786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f816 	bl	80057a8 <UART_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e00c      	b.n	80057a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b8:	e062      	b.n	8005880 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d05e      	beq.n	8005880 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fb fec9 	bl	8001558 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11d      	bne.n	8005814 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0201 	bic.w	r2, r2, #1
 80057f6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e045      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d02e      	beq.n	8005880 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800582c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005830:	d126      	bne.n	8005880 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800583a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800584a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e00f      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69da      	ldr	r2, [r3, #28]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	429a      	cmp	r2, r3
 800589c:	d08d      	beq.n	80057ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_UARTEx_DisableFifoMode+0x16>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e027      	b.n	800590e <HAL_UARTEx_DisableFifoMode+0x66>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2224      	movs	r2, #36	; 0x24
 80058ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800592e:	2302      	movs	r3, #2
 8005930:	e02d      	b.n	800598e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2224      	movs	r2, #36	; 0x24
 800593e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f850 	bl	8005a14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e02d      	b.n	8005a0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2224      	movs	r2, #36	; 0x24
 80059ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f812 	bl	8005a14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b089      	sub	sp, #36	; 0x24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005a1c:	4a2f      	ldr	r2, [pc, #188]	; (8005adc <UARTEx_SetNbDataToProcess+0xc8>)
 8005a1e:	f107 0314 	add.w	r3, r7, #20
 8005a22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a26:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005a2a:	4a2d      	ldr	r2, [pc, #180]	; (8005ae0 <UARTEx_SetNbDataToProcess+0xcc>)
 8005a2c:	f107 030c 	add.w	r3, r7, #12
 8005a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a34:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d108      	bne.n	8005a52 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a50:	e03d      	b.n	8005ace <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a52:	2310      	movs	r3, #16
 8005a54:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a56:	2310      	movs	r3, #16
 8005a58:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	0e5b      	lsrs	r3, r3, #25
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	0f5b      	lsrs	r3, r3, #29
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005a7a:	7fbb      	ldrb	r3, [r7, #30]
 8005a7c:	7f3a      	ldrb	r2, [r7, #28]
 8005a7e:	f107 0120 	add.w	r1, r7, #32
 8005a82:	440a      	add	r2, r1
 8005a84:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005a88:	fb02 f303 	mul.w	r3, r2, r3
 8005a8c:	7f3a      	ldrb	r2, [r7, #28]
 8005a8e:	f107 0120 	add.w	r1, r7, #32
 8005a92:	440a      	add	r2, r1
 8005a94:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005aa4:	7ffb      	ldrb	r3, [r7, #31]
 8005aa6:	7f7a      	ldrb	r2, [r7, #29]
 8005aa8:	f107 0120 	add.w	r1, r7, #32
 8005aac:	440a      	add	r2, r1
 8005aae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	7f7a      	ldrb	r2, [r7, #29]
 8005ab8:	f107 0120 	add.w	r1, r7, #32
 8005abc:	440a      	add	r2, r1
 8005abe:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ace:	bf00      	nop
 8005ad0:	3724      	adds	r7, #36	; 0x24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	08006a24 	.word	0x08006a24
 8005ae0:	08006a2c 	.word	0x08006a2c

08005ae4 <__errno>:
 8005ae4:	4b01      	ldr	r3, [pc, #4]	; (8005aec <__errno+0x8>)
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	24000010 	.word	0x24000010

08005af0 <__libc_init_array>:
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	4e0d      	ldr	r6, [pc, #52]	; (8005b28 <__libc_init_array+0x38>)
 8005af4:	4c0d      	ldr	r4, [pc, #52]	; (8005b2c <__libc_init_array+0x3c>)
 8005af6:	1ba4      	subs	r4, r4, r6
 8005af8:	10a4      	asrs	r4, r4, #2
 8005afa:	2500      	movs	r5, #0
 8005afc:	42a5      	cmp	r5, r4
 8005afe:	d109      	bne.n	8005b14 <__libc_init_array+0x24>
 8005b00:	4e0b      	ldr	r6, [pc, #44]	; (8005b30 <__libc_init_array+0x40>)
 8005b02:	4c0c      	ldr	r4, [pc, #48]	; (8005b34 <__libc_init_array+0x44>)
 8005b04:	f000 ff68 	bl	80069d8 <_init>
 8005b08:	1ba4      	subs	r4, r4, r6
 8005b0a:	10a4      	asrs	r4, r4, #2
 8005b0c:	2500      	movs	r5, #0
 8005b0e:	42a5      	cmp	r5, r4
 8005b10:	d105      	bne.n	8005b1e <__libc_init_array+0x2e>
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b18:	4798      	blx	r3
 8005b1a:	3501      	adds	r5, #1
 8005b1c:	e7ee      	b.n	8005afc <__libc_init_array+0xc>
 8005b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b22:	4798      	blx	r3
 8005b24:	3501      	adds	r5, #1
 8005b26:	e7f2      	b.n	8005b0e <__libc_init_array+0x1e>
 8005b28:	08006afc 	.word	0x08006afc
 8005b2c:	08006afc 	.word	0x08006afc
 8005b30:	08006afc 	.word	0x08006afc
 8005b34:	08006b00 	.word	0x08006b00

08005b38 <memset>:
 8005b38:	4402      	add	r2, r0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d100      	bne.n	8005b42 <memset+0xa>
 8005b40:	4770      	bx	lr
 8005b42:	f803 1b01 	strb.w	r1, [r3], #1
 8005b46:	e7f9      	b.n	8005b3c <memset+0x4>

08005b48 <iprintf>:
 8005b48:	b40f      	push	{r0, r1, r2, r3}
 8005b4a:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <iprintf+0x2c>)
 8005b4c:	b513      	push	{r0, r1, r4, lr}
 8005b4e:	681c      	ldr	r4, [r3, #0]
 8005b50:	b124      	cbz	r4, 8005b5c <iprintf+0x14>
 8005b52:	69a3      	ldr	r3, [r4, #24]
 8005b54:	b913      	cbnz	r3, 8005b5c <iprintf+0x14>
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fa22 	bl	8005fa0 <__sinit>
 8005b5c:	ab05      	add	r3, sp, #20
 8005b5e:	9a04      	ldr	r2, [sp, #16]
 8005b60:	68a1      	ldr	r1, [r4, #8]
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 fbdb 	bl	8006320 <_vfiprintf_r>
 8005b6a:	b002      	add	sp, #8
 8005b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b70:	b004      	add	sp, #16
 8005b72:	4770      	bx	lr
 8005b74:	24000010 	.word	0x24000010

08005b78 <_puts_r>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	460e      	mov	r6, r1
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	b118      	cbz	r0, 8005b88 <_puts_r+0x10>
 8005b80:	6983      	ldr	r3, [r0, #24]
 8005b82:	b90b      	cbnz	r3, 8005b88 <_puts_r+0x10>
 8005b84:	f000 fa0c 	bl	8005fa0 <__sinit>
 8005b88:	69ab      	ldr	r3, [r5, #24]
 8005b8a:	68ac      	ldr	r4, [r5, #8]
 8005b8c:	b913      	cbnz	r3, 8005b94 <_puts_r+0x1c>
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 fa06 	bl	8005fa0 <__sinit>
 8005b94:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <_puts_r+0xac>)
 8005b96:	429c      	cmp	r4, r3
 8005b98:	d117      	bne.n	8005bca <_puts_r+0x52>
 8005b9a:	686c      	ldr	r4, [r5, #4]
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	071b      	lsls	r3, r3, #28
 8005ba0:	d51d      	bpl.n	8005bde <_puts_r+0x66>
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	b1db      	cbz	r3, 8005bde <_puts_r+0x66>
 8005ba6:	3e01      	subs	r6, #1
 8005ba8:	68a3      	ldr	r3, [r4, #8]
 8005baa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	60a3      	str	r3, [r4, #8]
 8005bb2:	b9e9      	cbnz	r1, 8005bf0 <_puts_r+0x78>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	da2e      	bge.n	8005c16 <_puts_r+0x9e>
 8005bb8:	4622      	mov	r2, r4
 8005bba:	210a      	movs	r1, #10
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 f83f 	bl	8005c40 <__swbuf_r>
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d011      	beq.n	8005bea <_puts_r+0x72>
 8005bc6:	200a      	movs	r0, #10
 8005bc8:	e011      	b.n	8005bee <_puts_r+0x76>
 8005bca:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <_puts_r+0xb0>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	d101      	bne.n	8005bd4 <_puts_r+0x5c>
 8005bd0:	68ac      	ldr	r4, [r5, #8]
 8005bd2:	e7e3      	b.n	8005b9c <_puts_r+0x24>
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <_puts_r+0xb4>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	bf08      	it	eq
 8005bda:	68ec      	ldreq	r4, [r5, #12]
 8005bdc:	e7de      	b.n	8005b9c <_puts_r+0x24>
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 f87f 	bl	8005ce4 <__swsetup_r>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d0dd      	beq.n	8005ba6 <_puts_r+0x2e>
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	da04      	bge.n	8005bfe <_puts_r+0x86>
 8005bf4:	69a2      	ldr	r2, [r4, #24]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	dc06      	bgt.n	8005c08 <_puts_r+0x90>
 8005bfa:	290a      	cmp	r1, #10
 8005bfc:	d004      	beq.n	8005c08 <_puts_r+0x90>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	6022      	str	r2, [r4, #0]
 8005c04:	7019      	strb	r1, [r3, #0]
 8005c06:	e7cf      	b.n	8005ba8 <_puts_r+0x30>
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 f818 	bl	8005c40 <__swbuf_r>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d1c9      	bne.n	8005ba8 <_puts_r+0x30>
 8005c14:	e7e9      	b.n	8005bea <_puts_r+0x72>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	200a      	movs	r0, #10
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	6022      	str	r2, [r4, #0]
 8005c1e:	7018      	strb	r0, [r3, #0]
 8005c20:	e7e5      	b.n	8005bee <_puts_r+0x76>
 8005c22:	bf00      	nop
 8005c24:	08006a80 	.word	0x08006a80
 8005c28:	08006aa0 	.word	0x08006aa0
 8005c2c:	08006a60 	.word	0x08006a60

08005c30 <puts>:
 8005c30:	4b02      	ldr	r3, [pc, #8]	; (8005c3c <puts+0xc>)
 8005c32:	4601      	mov	r1, r0
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	f7ff bf9f 	b.w	8005b78 <_puts_r>
 8005c3a:	bf00      	nop
 8005c3c:	24000010 	.word	0x24000010

08005c40 <__swbuf_r>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	460e      	mov	r6, r1
 8005c44:	4614      	mov	r4, r2
 8005c46:	4605      	mov	r5, r0
 8005c48:	b118      	cbz	r0, 8005c52 <__swbuf_r+0x12>
 8005c4a:	6983      	ldr	r3, [r0, #24]
 8005c4c:	b90b      	cbnz	r3, 8005c52 <__swbuf_r+0x12>
 8005c4e:	f000 f9a7 	bl	8005fa0 <__sinit>
 8005c52:	4b21      	ldr	r3, [pc, #132]	; (8005cd8 <__swbuf_r+0x98>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d12a      	bne.n	8005cae <__swbuf_r+0x6e>
 8005c58:	686c      	ldr	r4, [r5, #4]
 8005c5a:	69a3      	ldr	r3, [r4, #24]
 8005c5c:	60a3      	str	r3, [r4, #8]
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	071a      	lsls	r2, r3, #28
 8005c62:	d52e      	bpl.n	8005cc2 <__swbuf_r+0x82>
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	b363      	cbz	r3, 8005cc2 <__swbuf_r+0x82>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	6820      	ldr	r0, [r4, #0]
 8005c6c:	1ac0      	subs	r0, r0, r3
 8005c6e:	6963      	ldr	r3, [r4, #20]
 8005c70:	b2f6      	uxtb	r6, r6
 8005c72:	4283      	cmp	r3, r0
 8005c74:	4637      	mov	r7, r6
 8005c76:	dc04      	bgt.n	8005c82 <__swbuf_r+0x42>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f926 	bl	8005ecc <_fflush_r>
 8005c80:	bb28      	cbnz	r0, 8005cce <__swbuf_r+0x8e>
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	60a3      	str	r3, [r4, #8]
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	6022      	str	r2, [r4, #0]
 8005c8e:	701e      	strb	r6, [r3, #0]
 8005c90:	6963      	ldr	r3, [r4, #20]
 8005c92:	3001      	adds	r0, #1
 8005c94:	4283      	cmp	r3, r0
 8005c96:	d004      	beq.n	8005ca2 <__swbuf_r+0x62>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	07db      	lsls	r3, r3, #31
 8005c9c:	d519      	bpl.n	8005cd2 <__swbuf_r+0x92>
 8005c9e:	2e0a      	cmp	r6, #10
 8005ca0:	d117      	bne.n	8005cd2 <__swbuf_r+0x92>
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 f911 	bl	8005ecc <_fflush_r>
 8005caa:	b190      	cbz	r0, 8005cd2 <__swbuf_r+0x92>
 8005cac:	e00f      	b.n	8005cce <__swbuf_r+0x8e>
 8005cae:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <__swbuf_r+0x9c>)
 8005cb0:	429c      	cmp	r4, r3
 8005cb2:	d101      	bne.n	8005cb8 <__swbuf_r+0x78>
 8005cb4:	68ac      	ldr	r4, [r5, #8]
 8005cb6:	e7d0      	b.n	8005c5a <__swbuf_r+0x1a>
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <__swbuf_r+0xa0>)
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	bf08      	it	eq
 8005cbe:	68ec      	ldreq	r4, [r5, #12]
 8005cc0:	e7cb      	b.n	8005c5a <__swbuf_r+0x1a>
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 f80d 	bl	8005ce4 <__swsetup_r>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d0cc      	beq.n	8005c68 <__swbuf_r+0x28>
 8005cce:	f04f 37ff 	mov.w	r7, #4294967295
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	08006a80 	.word	0x08006a80
 8005cdc:	08006aa0 	.word	0x08006aa0
 8005ce0:	08006a60 	.word	0x08006a60

08005ce4 <__swsetup_r>:
 8005ce4:	4b32      	ldr	r3, [pc, #200]	; (8005db0 <__swsetup_r+0xcc>)
 8005ce6:	b570      	push	{r4, r5, r6, lr}
 8005ce8:	681d      	ldr	r5, [r3, #0]
 8005cea:	4606      	mov	r6, r0
 8005cec:	460c      	mov	r4, r1
 8005cee:	b125      	cbz	r5, 8005cfa <__swsetup_r+0x16>
 8005cf0:	69ab      	ldr	r3, [r5, #24]
 8005cf2:	b913      	cbnz	r3, 8005cfa <__swsetup_r+0x16>
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 f953 	bl	8005fa0 <__sinit>
 8005cfa:	4b2e      	ldr	r3, [pc, #184]	; (8005db4 <__swsetup_r+0xd0>)
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	d10f      	bne.n	8005d20 <__swsetup_r+0x3c>
 8005d00:	686c      	ldr	r4, [r5, #4]
 8005d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	0715      	lsls	r5, r2, #28
 8005d0a:	d42c      	bmi.n	8005d66 <__swsetup_r+0x82>
 8005d0c:	06d0      	lsls	r0, r2, #27
 8005d0e:	d411      	bmi.n	8005d34 <__swsetup_r+0x50>
 8005d10:	2209      	movs	r2, #9
 8005d12:	6032      	str	r2, [r6, #0]
 8005d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1e:	e03e      	b.n	8005d9e <__swsetup_r+0xba>
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <__swsetup_r+0xd4>)
 8005d22:	429c      	cmp	r4, r3
 8005d24:	d101      	bne.n	8005d2a <__swsetup_r+0x46>
 8005d26:	68ac      	ldr	r4, [r5, #8]
 8005d28:	e7eb      	b.n	8005d02 <__swsetup_r+0x1e>
 8005d2a:	4b24      	ldr	r3, [pc, #144]	; (8005dbc <__swsetup_r+0xd8>)
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	bf08      	it	eq
 8005d30:	68ec      	ldreq	r4, [r5, #12]
 8005d32:	e7e6      	b.n	8005d02 <__swsetup_r+0x1e>
 8005d34:	0751      	lsls	r1, r2, #29
 8005d36:	d512      	bpl.n	8005d5e <__swsetup_r+0x7a>
 8005d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d3a:	b141      	cbz	r1, 8005d4e <__swsetup_r+0x6a>
 8005d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d40:	4299      	cmp	r1, r3
 8005d42:	d002      	beq.n	8005d4a <__swsetup_r+0x66>
 8005d44:	4630      	mov	r0, r6
 8005d46:	f000 fa19 	bl	800617c <_free_r>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	2300      	movs	r3, #0
 8005d58:	6063      	str	r3, [r4, #4]
 8005d5a:	6923      	ldr	r3, [r4, #16]
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	f043 0308 	orr.w	r3, r3, #8
 8005d64:	81a3      	strh	r3, [r4, #12]
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	b94b      	cbnz	r3, 8005d7e <__swsetup_r+0x9a>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d74:	d003      	beq.n	8005d7e <__swsetup_r+0x9a>
 8005d76:	4621      	mov	r1, r4
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 f9bf 	bl	80060fc <__smakebuf_r>
 8005d7e:	89a2      	ldrh	r2, [r4, #12]
 8005d80:	f012 0301 	ands.w	r3, r2, #1
 8005d84:	d00c      	beq.n	8005da0 <__swsetup_r+0xbc>
 8005d86:	2300      	movs	r3, #0
 8005d88:	60a3      	str	r3, [r4, #8]
 8005d8a:	6963      	ldr	r3, [r4, #20]
 8005d8c:	425b      	negs	r3, r3
 8005d8e:	61a3      	str	r3, [r4, #24]
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	b953      	cbnz	r3, 8005daa <__swsetup_r+0xc6>
 8005d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005d9c:	d1ba      	bne.n	8005d14 <__swsetup_r+0x30>
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	0792      	lsls	r2, r2, #30
 8005da2:	bf58      	it	pl
 8005da4:	6963      	ldrpl	r3, [r4, #20]
 8005da6:	60a3      	str	r3, [r4, #8]
 8005da8:	e7f2      	b.n	8005d90 <__swsetup_r+0xac>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e7f7      	b.n	8005d9e <__swsetup_r+0xba>
 8005dae:	bf00      	nop
 8005db0:	24000010 	.word	0x24000010
 8005db4:	08006a80 	.word	0x08006a80
 8005db8:	08006aa0 	.word	0x08006aa0
 8005dbc:	08006a60 	.word	0x08006a60

08005dc0 <__sflush_r>:
 8005dc0:	898a      	ldrh	r2, [r1, #12]
 8005dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	0710      	lsls	r0, r2, #28
 8005dca:	460c      	mov	r4, r1
 8005dcc:	d458      	bmi.n	8005e80 <__sflush_r+0xc0>
 8005dce:	684b      	ldr	r3, [r1, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	dc05      	bgt.n	8005de0 <__sflush_r+0x20>
 8005dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	dc02      	bgt.n	8005de0 <__sflush_r+0x20>
 8005dda:	2000      	movs	r0, #0
 8005ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005de2:	2e00      	cmp	r6, #0
 8005de4:	d0f9      	beq.n	8005dda <__sflush_r+0x1a>
 8005de6:	2300      	movs	r3, #0
 8005de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005dec:	682f      	ldr	r7, [r5, #0]
 8005dee:	6a21      	ldr	r1, [r4, #32]
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	d032      	beq.n	8005e5a <__sflush_r+0x9a>
 8005df4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	075a      	lsls	r2, r3, #29
 8005dfa:	d505      	bpl.n	8005e08 <__sflush_r+0x48>
 8005dfc:	6863      	ldr	r3, [r4, #4]
 8005dfe:	1ac0      	subs	r0, r0, r3
 8005e00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e02:	b10b      	cbz	r3, 8005e08 <__sflush_r+0x48>
 8005e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e06:	1ac0      	subs	r0, r0, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e0e:	6a21      	ldr	r1, [r4, #32]
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b0      	blx	r6
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	d106      	bne.n	8005e28 <__sflush_r+0x68>
 8005e1a:	6829      	ldr	r1, [r5, #0]
 8005e1c:	291d      	cmp	r1, #29
 8005e1e:	d848      	bhi.n	8005eb2 <__sflush_r+0xf2>
 8005e20:	4a29      	ldr	r2, [pc, #164]	; (8005ec8 <__sflush_r+0x108>)
 8005e22:	40ca      	lsrs	r2, r1
 8005e24:	07d6      	lsls	r6, r2, #31
 8005e26:	d544      	bpl.n	8005eb2 <__sflush_r+0xf2>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	6062      	str	r2, [r4, #4]
 8005e2c:	04d9      	lsls	r1, r3, #19
 8005e2e:	6922      	ldr	r2, [r4, #16]
 8005e30:	6022      	str	r2, [r4, #0]
 8005e32:	d504      	bpl.n	8005e3e <__sflush_r+0x7e>
 8005e34:	1c42      	adds	r2, r0, #1
 8005e36:	d101      	bne.n	8005e3c <__sflush_r+0x7c>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b903      	cbnz	r3, 8005e3e <__sflush_r+0x7e>
 8005e3c:	6560      	str	r0, [r4, #84]	; 0x54
 8005e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e40:	602f      	str	r7, [r5, #0]
 8005e42:	2900      	cmp	r1, #0
 8005e44:	d0c9      	beq.n	8005dda <__sflush_r+0x1a>
 8005e46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e4a:	4299      	cmp	r1, r3
 8005e4c:	d002      	beq.n	8005e54 <__sflush_r+0x94>
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 f994 	bl	800617c <_free_r>
 8005e54:	2000      	movs	r0, #0
 8005e56:	6360      	str	r0, [r4, #52]	; 0x34
 8005e58:	e7c0      	b.n	8005ddc <__sflush_r+0x1c>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b0      	blx	r6
 8005e60:	1c41      	adds	r1, r0, #1
 8005e62:	d1c8      	bne.n	8005df6 <__sflush_r+0x36>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0c5      	beq.n	8005df6 <__sflush_r+0x36>
 8005e6a:	2b1d      	cmp	r3, #29
 8005e6c:	d001      	beq.n	8005e72 <__sflush_r+0xb2>
 8005e6e:	2b16      	cmp	r3, #22
 8005e70:	d101      	bne.n	8005e76 <__sflush_r+0xb6>
 8005e72:	602f      	str	r7, [r5, #0]
 8005e74:	e7b1      	b.n	8005dda <__sflush_r+0x1a>
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e7c:	81a3      	strh	r3, [r4, #12]
 8005e7e:	e7ad      	b.n	8005ddc <__sflush_r+0x1c>
 8005e80:	690f      	ldr	r7, [r1, #16]
 8005e82:	2f00      	cmp	r7, #0
 8005e84:	d0a9      	beq.n	8005dda <__sflush_r+0x1a>
 8005e86:	0793      	lsls	r3, r2, #30
 8005e88:	680e      	ldr	r6, [r1, #0]
 8005e8a:	bf08      	it	eq
 8005e8c:	694b      	ldreq	r3, [r1, #20]
 8005e8e:	600f      	str	r7, [r1, #0]
 8005e90:	bf18      	it	ne
 8005e92:	2300      	movne	r3, #0
 8005e94:	eba6 0807 	sub.w	r8, r6, r7
 8005e98:	608b      	str	r3, [r1, #8]
 8005e9a:	f1b8 0f00 	cmp.w	r8, #0
 8005e9e:	dd9c      	ble.n	8005dda <__sflush_r+0x1a>
 8005ea0:	4643      	mov	r3, r8
 8005ea2:	463a      	mov	r2, r7
 8005ea4:	6a21      	ldr	r1, [r4, #32]
 8005ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b0      	blx	r6
 8005eac:	2800      	cmp	r0, #0
 8005eae:	dc06      	bgt.n	8005ebe <__sflush_r+0xfe>
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	e78e      	b.n	8005ddc <__sflush_r+0x1c>
 8005ebe:	4407      	add	r7, r0
 8005ec0:	eba8 0800 	sub.w	r8, r8, r0
 8005ec4:	e7e9      	b.n	8005e9a <__sflush_r+0xda>
 8005ec6:	bf00      	nop
 8005ec8:	20400001 	.word	0x20400001

08005ecc <_fflush_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	690b      	ldr	r3, [r1, #16]
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	b1db      	cbz	r3, 8005f0e <_fflush_r+0x42>
 8005ed6:	b118      	cbz	r0, 8005ee0 <_fflush_r+0x14>
 8005ed8:	6983      	ldr	r3, [r0, #24]
 8005eda:	b90b      	cbnz	r3, 8005ee0 <_fflush_r+0x14>
 8005edc:	f000 f860 	bl	8005fa0 <__sinit>
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <_fflush_r+0x48>)
 8005ee2:	429c      	cmp	r4, r3
 8005ee4:	d109      	bne.n	8005efa <_fflush_r+0x2e>
 8005ee6:	686c      	ldr	r4, [r5, #4]
 8005ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eec:	b17b      	cbz	r3, 8005f0e <_fflush_r+0x42>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ef6:	f7ff bf63 	b.w	8005dc0 <__sflush_r>
 8005efa:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <_fflush_r+0x4c>)
 8005efc:	429c      	cmp	r4, r3
 8005efe:	d101      	bne.n	8005f04 <_fflush_r+0x38>
 8005f00:	68ac      	ldr	r4, [r5, #8]
 8005f02:	e7f1      	b.n	8005ee8 <_fflush_r+0x1c>
 8005f04:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <_fflush_r+0x50>)
 8005f06:	429c      	cmp	r4, r3
 8005f08:	bf08      	it	eq
 8005f0a:	68ec      	ldreq	r4, [r5, #12]
 8005f0c:	e7ec      	b.n	8005ee8 <_fflush_r+0x1c>
 8005f0e:	2000      	movs	r0, #0
 8005f10:	bd38      	pop	{r3, r4, r5, pc}
 8005f12:	bf00      	nop
 8005f14:	08006a80 	.word	0x08006a80
 8005f18:	08006aa0 	.word	0x08006aa0
 8005f1c:	08006a60 	.word	0x08006a60

08005f20 <std>:
 8005f20:	2300      	movs	r3, #0
 8005f22:	b510      	push	{r4, lr}
 8005f24:	4604      	mov	r4, r0
 8005f26:	e9c0 3300 	strd	r3, r3, [r0]
 8005f2a:	6083      	str	r3, [r0, #8]
 8005f2c:	8181      	strh	r1, [r0, #12]
 8005f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f30:	81c2      	strh	r2, [r0, #14]
 8005f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f36:	6183      	str	r3, [r0, #24]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	2208      	movs	r2, #8
 8005f3c:	305c      	adds	r0, #92	; 0x5c
 8005f3e:	f7ff fdfb 	bl	8005b38 <memset>
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <std+0x38>)
 8005f44:	6263      	str	r3, [r4, #36]	; 0x24
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <std+0x3c>)
 8005f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f4a:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <std+0x40>)
 8005f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <std+0x44>)
 8005f50:	6224      	str	r4, [r4, #32]
 8005f52:	6323      	str	r3, [r4, #48]	; 0x30
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	bf00      	nop
 8005f58:	0800687d 	.word	0x0800687d
 8005f5c:	0800689f 	.word	0x0800689f
 8005f60:	080068d7 	.word	0x080068d7
 8005f64:	080068fb 	.word	0x080068fb

08005f68 <_cleanup_r>:
 8005f68:	4901      	ldr	r1, [pc, #4]	; (8005f70 <_cleanup_r+0x8>)
 8005f6a:	f000 b885 	b.w	8006078 <_fwalk_reent>
 8005f6e:	bf00      	nop
 8005f70:	08005ecd 	.word	0x08005ecd

08005f74 <__sfmoreglue>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	1e4a      	subs	r2, r1, #1
 8005f78:	2568      	movs	r5, #104	; 0x68
 8005f7a:	4355      	muls	r5, r2
 8005f7c:	460e      	mov	r6, r1
 8005f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f82:	f000 f949 	bl	8006218 <_malloc_r>
 8005f86:	4604      	mov	r4, r0
 8005f88:	b140      	cbz	r0, 8005f9c <__sfmoreglue+0x28>
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8005f90:	300c      	adds	r0, #12
 8005f92:	60a0      	str	r0, [r4, #8]
 8005f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f98:	f7ff fdce 	bl	8005b38 <memset>
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}

08005fa0 <__sinit>:
 8005fa0:	6983      	ldr	r3, [r0, #24]
 8005fa2:	b510      	push	{r4, lr}
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	bb33      	cbnz	r3, 8005ff6 <__sinit+0x56>
 8005fa8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005fac:	6503      	str	r3, [r0, #80]	; 0x50
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <__sinit+0x58>)
 8005fb0:	4a12      	ldr	r2, [pc, #72]	; (8005ffc <__sinit+0x5c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6282      	str	r2, [r0, #40]	; 0x28
 8005fb6:	4298      	cmp	r0, r3
 8005fb8:	bf04      	itt	eq
 8005fba:	2301      	moveq	r3, #1
 8005fbc:	6183      	streq	r3, [r0, #24]
 8005fbe:	f000 f81f 	bl	8006000 <__sfp>
 8005fc2:	6060      	str	r0, [r4, #4]
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 f81b 	bl	8006000 <__sfp>
 8005fca:	60a0      	str	r0, [r4, #8]
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 f817 	bl	8006000 <__sfp>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	60e0      	str	r0, [r4, #12]
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	6860      	ldr	r0, [r4, #4]
 8005fda:	f7ff ffa1 	bl	8005f20 <std>
 8005fde:	2201      	movs	r2, #1
 8005fe0:	2109      	movs	r1, #9
 8005fe2:	68a0      	ldr	r0, [r4, #8]
 8005fe4:	f7ff ff9c 	bl	8005f20 <std>
 8005fe8:	2202      	movs	r2, #2
 8005fea:	2112      	movs	r1, #18
 8005fec:	68e0      	ldr	r0, [r4, #12]
 8005fee:	f7ff ff97 	bl	8005f20 <std>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	61a3      	str	r3, [r4, #24]
 8005ff6:	bd10      	pop	{r4, pc}
 8005ff8:	08006a5c 	.word	0x08006a5c
 8005ffc:	08005f69 	.word	0x08005f69

08006000 <__sfp>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <__sfp+0x70>)
 8006004:	681e      	ldr	r6, [r3, #0]
 8006006:	69b3      	ldr	r3, [r6, #24]
 8006008:	4607      	mov	r7, r0
 800600a:	b913      	cbnz	r3, 8006012 <__sfp+0x12>
 800600c:	4630      	mov	r0, r6
 800600e:	f7ff ffc7 	bl	8005fa0 <__sinit>
 8006012:	3648      	adds	r6, #72	; 0x48
 8006014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006018:	3b01      	subs	r3, #1
 800601a:	d503      	bpl.n	8006024 <__sfp+0x24>
 800601c:	6833      	ldr	r3, [r6, #0]
 800601e:	b133      	cbz	r3, 800602e <__sfp+0x2e>
 8006020:	6836      	ldr	r6, [r6, #0]
 8006022:	e7f7      	b.n	8006014 <__sfp+0x14>
 8006024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006028:	b16d      	cbz	r5, 8006046 <__sfp+0x46>
 800602a:	3468      	adds	r4, #104	; 0x68
 800602c:	e7f4      	b.n	8006018 <__sfp+0x18>
 800602e:	2104      	movs	r1, #4
 8006030:	4638      	mov	r0, r7
 8006032:	f7ff ff9f 	bl	8005f74 <__sfmoreglue>
 8006036:	6030      	str	r0, [r6, #0]
 8006038:	2800      	cmp	r0, #0
 800603a:	d1f1      	bne.n	8006020 <__sfp+0x20>
 800603c:	230c      	movs	r3, #12
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4604      	mov	r4, r0
 8006042:	4620      	mov	r0, r4
 8006044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006046:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <__sfp+0x74>)
 8006048:	6665      	str	r5, [r4, #100]	; 0x64
 800604a:	e9c4 5500 	strd	r5, r5, [r4]
 800604e:	60a5      	str	r5, [r4, #8]
 8006050:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006054:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006058:	2208      	movs	r2, #8
 800605a:	4629      	mov	r1, r5
 800605c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006060:	f7ff fd6a 	bl	8005b38 <memset>
 8006064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800606c:	e7e9      	b.n	8006042 <__sfp+0x42>
 800606e:	bf00      	nop
 8006070:	08006a5c 	.word	0x08006a5c
 8006074:	ffff0001 	.word	0xffff0001

08006078 <_fwalk_reent>:
 8006078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800607c:	4680      	mov	r8, r0
 800607e:	4689      	mov	r9, r1
 8006080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006084:	2600      	movs	r6, #0
 8006086:	b914      	cbnz	r4, 800608e <_fwalk_reent+0x16>
 8006088:	4630      	mov	r0, r6
 800608a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800608e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006092:	3f01      	subs	r7, #1
 8006094:	d501      	bpl.n	800609a <_fwalk_reent+0x22>
 8006096:	6824      	ldr	r4, [r4, #0]
 8006098:	e7f5      	b.n	8006086 <_fwalk_reent+0xe>
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d907      	bls.n	80060b0 <_fwalk_reent+0x38>
 80060a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060a4:	3301      	adds	r3, #1
 80060a6:	d003      	beq.n	80060b0 <_fwalk_reent+0x38>
 80060a8:	4629      	mov	r1, r5
 80060aa:	4640      	mov	r0, r8
 80060ac:	47c8      	blx	r9
 80060ae:	4306      	orrs	r6, r0
 80060b0:	3568      	adds	r5, #104	; 0x68
 80060b2:	e7ee      	b.n	8006092 <_fwalk_reent+0x1a>

080060b4 <__swhatbuf_r>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	460e      	mov	r6, r1
 80060b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060bc:	2900      	cmp	r1, #0
 80060be:	b096      	sub	sp, #88	; 0x58
 80060c0:	4614      	mov	r4, r2
 80060c2:	461d      	mov	r5, r3
 80060c4:	da07      	bge.n	80060d6 <__swhatbuf_r+0x22>
 80060c6:	2300      	movs	r3, #0
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	89b3      	ldrh	r3, [r6, #12]
 80060cc:	061a      	lsls	r2, r3, #24
 80060ce:	d410      	bmi.n	80060f2 <__swhatbuf_r+0x3e>
 80060d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d4:	e00e      	b.n	80060f4 <__swhatbuf_r+0x40>
 80060d6:	466a      	mov	r2, sp
 80060d8:	f000 fc36 	bl	8006948 <_fstat_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	dbf2      	blt.n	80060c6 <__swhatbuf_r+0x12>
 80060e0:	9a01      	ldr	r2, [sp, #4]
 80060e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060ea:	425a      	negs	r2, r3
 80060ec:	415a      	adcs	r2, r3
 80060ee:	602a      	str	r2, [r5, #0]
 80060f0:	e7ee      	b.n	80060d0 <__swhatbuf_r+0x1c>
 80060f2:	2340      	movs	r3, #64	; 0x40
 80060f4:	2000      	movs	r0, #0
 80060f6:	6023      	str	r3, [r4, #0]
 80060f8:	b016      	add	sp, #88	; 0x58
 80060fa:	bd70      	pop	{r4, r5, r6, pc}

080060fc <__smakebuf_r>:
 80060fc:	898b      	ldrh	r3, [r1, #12]
 80060fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006100:	079d      	lsls	r5, r3, #30
 8006102:	4606      	mov	r6, r0
 8006104:	460c      	mov	r4, r1
 8006106:	d507      	bpl.n	8006118 <__smakebuf_r+0x1c>
 8006108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	6123      	str	r3, [r4, #16]
 8006110:	2301      	movs	r3, #1
 8006112:	6163      	str	r3, [r4, #20]
 8006114:	b002      	add	sp, #8
 8006116:	bd70      	pop	{r4, r5, r6, pc}
 8006118:	ab01      	add	r3, sp, #4
 800611a:	466a      	mov	r2, sp
 800611c:	f7ff ffca 	bl	80060b4 <__swhatbuf_r>
 8006120:	9900      	ldr	r1, [sp, #0]
 8006122:	4605      	mov	r5, r0
 8006124:	4630      	mov	r0, r6
 8006126:	f000 f877 	bl	8006218 <_malloc_r>
 800612a:	b948      	cbnz	r0, 8006140 <__smakebuf_r+0x44>
 800612c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006130:	059a      	lsls	r2, r3, #22
 8006132:	d4ef      	bmi.n	8006114 <__smakebuf_r+0x18>
 8006134:	f023 0303 	bic.w	r3, r3, #3
 8006138:	f043 0302 	orr.w	r3, r3, #2
 800613c:	81a3      	strh	r3, [r4, #12]
 800613e:	e7e3      	b.n	8006108 <__smakebuf_r+0xc>
 8006140:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <__smakebuf_r+0x7c>)
 8006142:	62b3      	str	r3, [r6, #40]	; 0x28
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	6020      	str	r0, [r4, #0]
 8006148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614c:	81a3      	strh	r3, [r4, #12]
 800614e:	9b00      	ldr	r3, [sp, #0]
 8006150:	6163      	str	r3, [r4, #20]
 8006152:	9b01      	ldr	r3, [sp, #4]
 8006154:	6120      	str	r0, [r4, #16]
 8006156:	b15b      	cbz	r3, 8006170 <__smakebuf_r+0x74>
 8006158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800615c:	4630      	mov	r0, r6
 800615e:	f000 fc05 	bl	800696c <_isatty_r>
 8006162:	b128      	cbz	r0, 8006170 <__smakebuf_r+0x74>
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	431d      	orrs	r5, r3
 8006174:	81a5      	strh	r5, [r4, #12]
 8006176:	e7cd      	b.n	8006114 <__smakebuf_r+0x18>
 8006178:	08005f69 	.word	0x08005f69

0800617c <_free_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4605      	mov	r5, r0
 8006180:	2900      	cmp	r1, #0
 8006182:	d045      	beq.n	8006210 <_free_r+0x94>
 8006184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006188:	1f0c      	subs	r4, r1, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfb8      	it	lt
 800618e:	18e4      	addlt	r4, r4, r3
 8006190:	f000 fc0e 	bl	80069b0 <__malloc_lock>
 8006194:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <_free_r+0x98>)
 8006196:	6813      	ldr	r3, [r2, #0]
 8006198:	4610      	mov	r0, r2
 800619a:	b933      	cbnz	r3, 80061aa <_free_r+0x2e>
 800619c:	6063      	str	r3, [r4, #4]
 800619e:	6014      	str	r4, [r2, #0]
 80061a0:	4628      	mov	r0, r5
 80061a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a6:	f000 bc04 	b.w	80069b2 <__malloc_unlock>
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	d90c      	bls.n	80061c8 <_free_r+0x4c>
 80061ae:	6821      	ldr	r1, [r4, #0]
 80061b0:	1862      	adds	r2, r4, r1
 80061b2:	4293      	cmp	r3, r2
 80061b4:	bf04      	itt	eq
 80061b6:	681a      	ldreq	r2, [r3, #0]
 80061b8:	685b      	ldreq	r3, [r3, #4]
 80061ba:	6063      	str	r3, [r4, #4]
 80061bc:	bf04      	itt	eq
 80061be:	1852      	addeq	r2, r2, r1
 80061c0:	6022      	streq	r2, [r4, #0]
 80061c2:	6004      	str	r4, [r0, #0]
 80061c4:	e7ec      	b.n	80061a0 <_free_r+0x24>
 80061c6:	4613      	mov	r3, r2
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	b10a      	cbz	r2, 80061d0 <_free_r+0x54>
 80061cc:	42a2      	cmp	r2, r4
 80061ce:	d9fa      	bls.n	80061c6 <_free_r+0x4a>
 80061d0:	6819      	ldr	r1, [r3, #0]
 80061d2:	1858      	adds	r0, r3, r1
 80061d4:	42a0      	cmp	r0, r4
 80061d6:	d10b      	bne.n	80061f0 <_free_r+0x74>
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	4401      	add	r1, r0
 80061dc:	1858      	adds	r0, r3, r1
 80061de:	4282      	cmp	r2, r0
 80061e0:	6019      	str	r1, [r3, #0]
 80061e2:	d1dd      	bne.n	80061a0 <_free_r+0x24>
 80061e4:	6810      	ldr	r0, [r2, #0]
 80061e6:	6852      	ldr	r2, [r2, #4]
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	4401      	add	r1, r0
 80061ec:	6019      	str	r1, [r3, #0]
 80061ee:	e7d7      	b.n	80061a0 <_free_r+0x24>
 80061f0:	d902      	bls.n	80061f8 <_free_r+0x7c>
 80061f2:	230c      	movs	r3, #12
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	e7d3      	b.n	80061a0 <_free_r+0x24>
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	1821      	adds	r1, r4, r0
 80061fc:	428a      	cmp	r2, r1
 80061fe:	bf04      	itt	eq
 8006200:	6811      	ldreq	r1, [r2, #0]
 8006202:	6852      	ldreq	r2, [r2, #4]
 8006204:	6062      	str	r2, [r4, #4]
 8006206:	bf04      	itt	eq
 8006208:	1809      	addeq	r1, r1, r0
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	605c      	str	r4, [r3, #4]
 800620e:	e7c7      	b.n	80061a0 <_free_r+0x24>
 8006210:	bd38      	pop	{r3, r4, r5, pc}
 8006212:	bf00      	nop
 8006214:	24000098 	.word	0x24000098

08006218 <_malloc_r>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	1ccd      	adds	r5, r1, #3
 800621c:	f025 0503 	bic.w	r5, r5, #3
 8006220:	3508      	adds	r5, #8
 8006222:	2d0c      	cmp	r5, #12
 8006224:	bf38      	it	cc
 8006226:	250c      	movcc	r5, #12
 8006228:	2d00      	cmp	r5, #0
 800622a:	4606      	mov	r6, r0
 800622c:	db01      	blt.n	8006232 <_malloc_r+0x1a>
 800622e:	42a9      	cmp	r1, r5
 8006230:	d903      	bls.n	800623a <_malloc_r+0x22>
 8006232:	230c      	movs	r3, #12
 8006234:	6033      	str	r3, [r6, #0]
 8006236:	2000      	movs	r0, #0
 8006238:	bd70      	pop	{r4, r5, r6, pc}
 800623a:	f000 fbb9 	bl	80069b0 <__malloc_lock>
 800623e:	4a21      	ldr	r2, [pc, #132]	; (80062c4 <_malloc_r+0xac>)
 8006240:	6814      	ldr	r4, [r2, #0]
 8006242:	4621      	mov	r1, r4
 8006244:	b991      	cbnz	r1, 800626c <_malloc_r+0x54>
 8006246:	4c20      	ldr	r4, [pc, #128]	; (80062c8 <_malloc_r+0xb0>)
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	b91b      	cbnz	r3, 8006254 <_malloc_r+0x3c>
 800624c:	4630      	mov	r0, r6
 800624e:	f000 fb05 	bl	800685c <_sbrk_r>
 8006252:	6020      	str	r0, [r4, #0]
 8006254:	4629      	mov	r1, r5
 8006256:	4630      	mov	r0, r6
 8006258:	f000 fb00 	bl	800685c <_sbrk_r>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d124      	bne.n	80062aa <_malloc_r+0x92>
 8006260:	230c      	movs	r3, #12
 8006262:	6033      	str	r3, [r6, #0]
 8006264:	4630      	mov	r0, r6
 8006266:	f000 fba4 	bl	80069b2 <__malloc_unlock>
 800626a:	e7e4      	b.n	8006236 <_malloc_r+0x1e>
 800626c:	680b      	ldr	r3, [r1, #0]
 800626e:	1b5b      	subs	r3, r3, r5
 8006270:	d418      	bmi.n	80062a4 <_malloc_r+0x8c>
 8006272:	2b0b      	cmp	r3, #11
 8006274:	d90f      	bls.n	8006296 <_malloc_r+0x7e>
 8006276:	600b      	str	r3, [r1, #0]
 8006278:	50cd      	str	r5, [r1, r3]
 800627a:	18cc      	adds	r4, r1, r3
 800627c:	4630      	mov	r0, r6
 800627e:	f000 fb98 	bl	80069b2 <__malloc_unlock>
 8006282:	f104 000b 	add.w	r0, r4, #11
 8006286:	1d23      	adds	r3, r4, #4
 8006288:	f020 0007 	bic.w	r0, r0, #7
 800628c:	1ac3      	subs	r3, r0, r3
 800628e:	d0d3      	beq.n	8006238 <_malloc_r+0x20>
 8006290:	425a      	negs	r2, r3
 8006292:	50e2      	str	r2, [r4, r3]
 8006294:	e7d0      	b.n	8006238 <_malloc_r+0x20>
 8006296:	428c      	cmp	r4, r1
 8006298:	684b      	ldr	r3, [r1, #4]
 800629a:	bf16      	itet	ne
 800629c:	6063      	strne	r3, [r4, #4]
 800629e:	6013      	streq	r3, [r2, #0]
 80062a0:	460c      	movne	r4, r1
 80062a2:	e7eb      	b.n	800627c <_malloc_r+0x64>
 80062a4:	460c      	mov	r4, r1
 80062a6:	6849      	ldr	r1, [r1, #4]
 80062a8:	e7cc      	b.n	8006244 <_malloc_r+0x2c>
 80062aa:	1cc4      	adds	r4, r0, #3
 80062ac:	f024 0403 	bic.w	r4, r4, #3
 80062b0:	42a0      	cmp	r0, r4
 80062b2:	d005      	beq.n	80062c0 <_malloc_r+0xa8>
 80062b4:	1a21      	subs	r1, r4, r0
 80062b6:	4630      	mov	r0, r6
 80062b8:	f000 fad0 	bl	800685c <_sbrk_r>
 80062bc:	3001      	adds	r0, #1
 80062be:	d0cf      	beq.n	8006260 <_malloc_r+0x48>
 80062c0:	6025      	str	r5, [r4, #0]
 80062c2:	e7db      	b.n	800627c <_malloc_r+0x64>
 80062c4:	24000098 	.word	0x24000098
 80062c8:	2400009c 	.word	0x2400009c

080062cc <__sfputc_r>:
 80062cc:	6893      	ldr	r3, [r2, #8]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	b410      	push	{r4}
 80062d4:	6093      	str	r3, [r2, #8]
 80062d6:	da08      	bge.n	80062ea <__sfputc_r+0x1e>
 80062d8:	6994      	ldr	r4, [r2, #24]
 80062da:	42a3      	cmp	r3, r4
 80062dc:	db01      	blt.n	80062e2 <__sfputc_r+0x16>
 80062de:	290a      	cmp	r1, #10
 80062e0:	d103      	bne.n	80062ea <__sfputc_r+0x1e>
 80062e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062e6:	f7ff bcab 	b.w	8005c40 <__swbuf_r>
 80062ea:	6813      	ldr	r3, [r2, #0]
 80062ec:	1c58      	adds	r0, r3, #1
 80062ee:	6010      	str	r0, [r2, #0]
 80062f0:	7019      	strb	r1, [r3, #0]
 80062f2:	4608      	mov	r0, r1
 80062f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <__sfputs_r>:
 80062fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fc:	4606      	mov	r6, r0
 80062fe:	460f      	mov	r7, r1
 8006300:	4614      	mov	r4, r2
 8006302:	18d5      	adds	r5, r2, r3
 8006304:	42ac      	cmp	r4, r5
 8006306:	d101      	bne.n	800630c <__sfputs_r+0x12>
 8006308:	2000      	movs	r0, #0
 800630a:	e007      	b.n	800631c <__sfputs_r+0x22>
 800630c:	463a      	mov	r2, r7
 800630e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff ffda 	bl	80062cc <__sfputc_r>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d1f3      	bne.n	8006304 <__sfputs_r+0xa>
 800631c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006320 <_vfiprintf_r>:
 8006320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006324:	460c      	mov	r4, r1
 8006326:	b09d      	sub	sp, #116	; 0x74
 8006328:	4617      	mov	r7, r2
 800632a:	461d      	mov	r5, r3
 800632c:	4606      	mov	r6, r0
 800632e:	b118      	cbz	r0, 8006338 <_vfiprintf_r+0x18>
 8006330:	6983      	ldr	r3, [r0, #24]
 8006332:	b90b      	cbnz	r3, 8006338 <_vfiprintf_r+0x18>
 8006334:	f7ff fe34 	bl	8005fa0 <__sinit>
 8006338:	4b7c      	ldr	r3, [pc, #496]	; (800652c <_vfiprintf_r+0x20c>)
 800633a:	429c      	cmp	r4, r3
 800633c:	d158      	bne.n	80063f0 <_vfiprintf_r+0xd0>
 800633e:	6874      	ldr	r4, [r6, #4]
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	0718      	lsls	r0, r3, #28
 8006344:	d55e      	bpl.n	8006404 <_vfiprintf_r+0xe4>
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d05b      	beq.n	8006404 <_vfiprintf_r+0xe4>
 800634c:	2300      	movs	r3, #0
 800634e:	9309      	str	r3, [sp, #36]	; 0x24
 8006350:	2320      	movs	r3, #32
 8006352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006356:	2330      	movs	r3, #48	; 0x30
 8006358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800635c:	9503      	str	r5, [sp, #12]
 800635e:	f04f 0b01 	mov.w	fp, #1
 8006362:	46b8      	mov	r8, r7
 8006364:	4645      	mov	r5, r8
 8006366:	f815 3b01 	ldrb.w	r3, [r5], #1
 800636a:	b10b      	cbz	r3, 8006370 <_vfiprintf_r+0x50>
 800636c:	2b25      	cmp	r3, #37	; 0x25
 800636e:	d154      	bne.n	800641a <_vfiprintf_r+0xfa>
 8006370:	ebb8 0a07 	subs.w	sl, r8, r7
 8006374:	d00b      	beq.n	800638e <_vfiprintf_r+0x6e>
 8006376:	4653      	mov	r3, sl
 8006378:	463a      	mov	r2, r7
 800637a:	4621      	mov	r1, r4
 800637c:	4630      	mov	r0, r6
 800637e:	f7ff ffbc 	bl	80062fa <__sfputs_r>
 8006382:	3001      	adds	r0, #1
 8006384:	f000 80c2 	beq.w	800650c <_vfiprintf_r+0x1ec>
 8006388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638a:	4453      	add	r3, sl
 800638c:	9309      	str	r3, [sp, #36]	; 0x24
 800638e:	f898 3000 	ldrb.w	r3, [r8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 80ba 	beq.w	800650c <_vfiprintf_r+0x1ec>
 8006398:	2300      	movs	r3, #0
 800639a:	f04f 32ff 	mov.w	r2, #4294967295
 800639e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	9307      	str	r3, [sp, #28]
 80063a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063aa:	931a      	str	r3, [sp, #104]	; 0x68
 80063ac:	46a8      	mov	r8, r5
 80063ae:	2205      	movs	r2, #5
 80063b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80063b4:	485e      	ldr	r0, [pc, #376]	; (8006530 <_vfiprintf_r+0x210>)
 80063b6:	f7f9 ff93 	bl	80002e0 <memchr>
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	bb78      	cbnz	r0, 800641e <_vfiprintf_r+0xfe>
 80063be:	06d9      	lsls	r1, r3, #27
 80063c0:	bf44      	itt	mi
 80063c2:	2220      	movmi	r2, #32
 80063c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063c8:	071a      	lsls	r2, r3, #28
 80063ca:	bf44      	itt	mi
 80063cc:	222b      	movmi	r2, #43	; 0x2b
 80063ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063d2:	782a      	ldrb	r2, [r5, #0]
 80063d4:	2a2a      	cmp	r2, #42	; 0x2a
 80063d6:	d02a      	beq.n	800642e <_vfiprintf_r+0x10e>
 80063d8:	9a07      	ldr	r2, [sp, #28]
 80063da:	46a8      	mov	r8, r5
 80063dc:	2000      	movs	r0, #0
 80063de:	250a      	movs	r5, #10
 80063e0:	4641      	mov	r1, r8
 80063e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063e6:	3b30      	subs	r3, #48	; 0x30
 80063e8:	2b09      	cmp	r3, #9
 80063ea:	d969      	bls.n	80064c0 <_vfiprintf_r+0x1a0>
 80063ec:	b360      	cbz	r0, 8006448 <_vfiprintf_r+0x128>
 80063ee:	e024      	b.n	800643a <_vfiprintf_r+0x11a>
 80063f0:	4b50      	ldr	r3, [pc, #320]	; (8006534 <_vfiprintf_r+0x214>)
 80063f2:	429c      	cmp	r4, r3
 80063f4:	d101      	bne.n	80063fa <_vfiprintf_r+0xda>
 80063f6:	68b4      	ldr	r4, [r6, #8]
 80063f8:	e7a2      	b.n	8006340 <_vfiprintf_r+0x20>
 80063fa:	4b4f      	ldr	r3, [pc, #316]	; (8006538 <_vfiprintf_r+0x218>)
 80063fc:	429c      	cmp	r4, r3
 80063fe:	bf08      	it	eq
 8006400:	68f4      	ldreq	r4, [r6, #12]
 8006402:	e79d      	b.n	8006340 <_vfiprintf_r+0x20>
 8006404:	4621      	mov	r1, r4
 8006406:	4630      	mov	r0, r6
 8006408:	f7ff fc6c 	bl	8005ce4 <__swsetup_r>
 800640c:	2800      	cmp	r0, #0
 800640e:	d09d      	beq.n	800634c <_vfiprintf_r+0x2c>
 8006410:	f04f 30ff 	mov.w	r0, #4294967295
 8006414:	b01d      	add	sp, #116	; 0x74
 8006416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641a:	46a8      	mov	r8, r5
 800641c:	e7a2      	b.n	8006364 <_vfiprintf_r+0x44>
 800641e:	4a44      	ldr	r2, [pc, #272]	; (8006530 <_vfiprintf_r+0x210>)
 8006420:	1a80      	subs	r0, r0, r2
 8006422:	fa0b f000 	lsl.w	r0, fp, r0
 8006426:	4318      	orrs	r0, r3
 8006428:	9004      	str	r0, [sp, #16]
 800642a:	4645      	mov	r5, r8
 800642c:	e7be      	b.n	80063ac <_vfiprintf_r+0x8c>
 800642e:	9a03      	ldr	r2, [sp, #12]
 8006430:	1d11      	adds	r1, r2, #4
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	9103      	str	r1, [sp, #12]
 8006436:	2a00      	cmp	r2, #0
 8006438:	db01      	blt.n	800643e <_vfiprintf_r+0x11e>
 800643a:	9207      	str	r2, [sp, #28]
 800643c:	e004      	b.n	8006448 <_vfiprintf_r+0x128>
 800643e:	4252      	negs	r2, r2
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	9207      	str	r2, [sp, #28]
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	f898 3000 	ldrb.w	r3, [r8]
 800644c:	2b2e      	cmp	r3, #46	; 0x2e
 800644e:	d10e      	bne.n	800646e <_vfiprintf_r+0x14e>
 8006450:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006454:	2b2a      	cmp	r3, #42	; 0x2a
 8006456:	d138      	bne.n	80064ca <_vfiprintf_r+0x1aa>
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	1d1a      	adds	r2, r3, #4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	9203      	str	r2, [sp, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	bfb8      	it	lt
 8006464:	f04f 33ff 	movlt.w	r3, #4294967295
 8006468:	f108 0802 	add.w	r8, r8, #2
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	4d33      	ldr	r5, [pc, #204]	; (800653c <_vfiprintf_r+0x21c>)
 8006470:	f898 1000 	ldrb.w	r1, [r8]
 8006474:	2203      	movs	r2, #3
 8006476:	4628      	mov	r0, r5
 8006478:	f7f9 ff32 	bl	80002e0 <memchr>
 800647c:	b140      	cbz	r0, 8006490 <_vfiprintf_r+0x170>
 800647e:	2340      	movs	r3, #64	; 0x40
 8006480:	1b40      	subs	r0, r0, r5
 8006482:	fa03 f000 	lsl.w	r0, r3, r0
 8006486:	9b04      	ldr	r3, [sp, #16]
 8006488:	4303      	orrs	r3, r0
 800648a:	f108 0801 	add.w	r8, r8, #1
 800648e:	9304      	str	r3, [sp, #16]
 8006490:	f898 1000 	ldrb.w	r1, [r8]
 8006494:	482a      	ldr	r0, [pc, #168]	; (8006540 <_vfiprintf_r+0x220>)
 8006496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800649a:	2206      	movs	r2, #6
 800649c:	f108 0701 	add.w	r7, r8, #1
 80064a0:	f7f9 ff1e 	bl	80002e0 <memchr>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d037      	beq.n	8006518 <_vfiprintf_r+0x1f8>
 80064a8:	4b26      	ldr	r3, [pc, #152]	; (8006544 <_vfiprintf_r+0x224>)
 80064aa:	bb1b      	cbnz	r3, 80064f4 <_vfiprintf_r+0x1d4>
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	3307      	adds	r3, #7
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	3308      	adds	r3, #8
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ba:	444b      	add	r3, r9
 80064bc:	9309      	str	r3, [sp, #36]	; 0x24
 80064be:	e750      	b.n	8006362 <_vfiprintf_r+0x42>
 80064c0:	fb05 3202 	mla	r2, r5, r2, r3
 80064c4:	2001      	movs	r0, #1
 80064c6:	4688      	mov	r8, r1
 80064c8:	e78a      	b.n	80063e0 <_vfiprintf_r+0xc0>
 80064ca:	2300      	movs	r3, #0
 80064cc:	f108 0801 	add.w	r8, r8, #1
 80064d0:	9305      	str	r3, [sp, #20]
 80064d2:	4619      	mov	r1, r3
 80064d4:	250a      	movs	r5, #10
 80064d6:	4640      	mov	r0, r8
 80064d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064dc:	3a30      	subs	r2, #48	; 0x30
 80064de:	2a09      	cmp	r2, #9
 80064e0:	d903      	bls.n	80064ea <_vfiprintf_r+0x1ca>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0c3      	beq.n	800646e <_vfiprintf_r+0x14e>
 80064e6:	9105      	str	r1, [sp, #20]
 80064e8:	e7c1      	b.n	800646e <_vfiprintf_r+0x14e>
 80064ea:	fb05 2101 	mla	r1, r5, r1, r2
 80064ee:	2301      	movs	r3, #1
 80064f0:	4680      	mov	r8, r0
 80064f2:	e7f0      	b.n	80064d6 <_vfiprintf_r+0x1b6>
 80064f4:	ab03      	add	r3, sp, #12
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	4622      	mov	r2, r4
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <_vfiprintf_r+0x228>)
 80064fc:	a904      	add	r1, sp, #16
 80064fe:	4630      	mov	r0, r6
 8006500:	f3af 8000 	nop.w
 8006504:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006508:	4681      	mov	r9, r0
 800650a:	d1d5      	bne.n	80064b8 <_vfiprintf_r+0x198>
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	065b      	lsls	r3, r3, #25
 8006510:	f53f af7e 	bmi.w	8006410 <_vfiprintf_r+0xf0>
 8006514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006516:	e77d      	b.n	8006414 <_vfiprintf_r+0xf4>
 8006518:	ab03      	add	r3, sp, #12
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	4622      	mov	r2, r4
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <_vfiprintf_r+0x228>)
 8006520:	a904      	add	r1, sp, #16
 8006522:	4630      	mov	r0, r6
 8006524:	f000 f888 	bl	8006638 <_printf_i>
 8006528:	e7ec      	b.n	8006504 <_vfiprintf_r+0x1e4>
 800652a:	bf00      	nop
 800652c:	08006a80 	.word	0x08006a80
 8006530:	08006ac0 	.word	0x08006ac0
 8006534:	08006aa0 	.word	0x08006aa0
 8006538:	08006a60 	.word	0x08006a60
 800653c:	08006ac6 	.word	0x08006ac6
 8006540:	08006aca 	.word	0x08006aca
 8006544:	00000000 	.word	0x00000000
 8006548:	080062fb 	.word	0x080062fb

0800654c <_printf_common>:
 800654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006550:	4691      	mov	r9, r2
 8006552:	461f      	mov	r7, r3
 8006554:	688a      	ldr	r2, [r1, #8]
 8006556:	690b      	ldr	r3, [r1, #16]
 8006558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800655c:	4293      	cmp	r3, r2
 800655e:	bfb8      	it	lt
 8006560:	4613      	movlt	r3, r2
 8006562:	f8c9 3000 	str.w	r3, [r9]
 8006566:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800656a:	4606      	mov	r6, r0
 800656c:	460c      	mov	r4, r1
 800656e:	b112      	cbz	r2, 8006576 <_printf_common+0x2a>
 8006570:	3301      	adds	r3, #1
 8006572:	f8c9 3000 	str.w	r3, [r9]
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	0699      	lsls	r1, r3, #26
 800657a:	bf42      	ittt	mi
 800657c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006580:	3302      	addmi	r3, #2
 8006582:	f8c9 3000 	strmi.w	r3, [r9]
 8006586:	6825      	ldr	r5, [r4, #0]
 8006588:	f015 0506 	ands.w	r5, r5, #6
 800658c:	d107      	bne.n	800659e <_printf_common+0x52>
 800658e:	f104 0a19 	add.w	sl, r4, #25
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	f8d9 2000 	ldr.w	r2, [r9]
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	42ab      	cmp	r3, r5
 800659c:	dc28      	bgt.n	80065f0 <_printf_common+0xa4>
 800659e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	3300      	adds	r3, #0
 80065a6:	bf18      	it	ne
 80065a8:	2301      	movne	r3, #1
 80065aa:	0692      	lsls	r2, r2, #26
 80065ac:	d42d      	bmi.n	800660a <_printf_common+0xbe>
 80065ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065b2:	4639      	mov	r1, r7
 80065b4:	4630      	mov	r0, r6
 80065b6:	47c0      	blx	r8
 80065b8:	3001      	adds	r0, #1
 80065ba:	d020      	beq.n	80065fe <_printf_common+0xb2>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	68e5      	ldr	r5, [r4, #12]
 80065c0:	f8d9 2000 	ldr.w	r2, [r9]
 80065c4:	f003 0306 	and.w	r3, r3, #6
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	bf08      	it	eq
 80065cc:	1aad      	subeq	r5, r5, r2
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	6922      	ldr	r2, [r4, #16]
 80065d2:	bf0c      	ite	eq
 80065d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d8:	2500      	movne	r5, #0
 80065da:	4293      	cmp	r3, r2
 80065dc:	bfc4      	itt	gt
 80065de:	1a9b      	subgt	r3, r3, r2
 80065e0:	18ed      	addgt	r5, r5, r3
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	341a      	adds	r4, #26
 80065e8:	454d      	cmp	r5, r9
 80065ea:	d11a      	bne.n	8006622 <_printf_common+0xd6>
 80065ec:	2000      	movs	r0, #0
 80065ee:	e008      	b.n	8006602 <_printf_common+0xb6>
 80065f0:	2301      	movs	r3, #1
 80065f2:	4652      	mov	r2, sl
 80065f4:	4639      	mov	r1, r7
 80065f6:	4630      	mov	r0, r6
 80065f8:	47c0      	blx	r8
 80065fa:	3001      	adds	r0, #1
 80065fc:	d103      	bne.n	8006606 <_printf_common+0xba>
 80065fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	3501      	adds	r5, #1
 8006608:	e7c3      	b.n	8006592 <_printf_common+0x46>
 800660a:	18e1      	adds	r1, r4, r3
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	2030      	movs	r0, #48	; 0x30
 8006610:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006614:	4422      	add	r2, r4
 8006616:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800661a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800661e:	3302      	adds	r3, #2
 8006620:	e7c5      	b.n	80065ae <_printf_common+0x62>
 8006622:	2301      	movs	r3, #1
 8006624:	4622      	mov	r2, r4
 8006626:	4639      	mov	r1, r7
 8006628:	4630      	mov	r0, r6
 800662a:	47c0      	blx	r8
 800662c:	3001      	adds	r0, #1
 800662e:	d0e6      	beq.n	80065fe <_printf_common+0xb2>
 8006630:	f109 0901 	add.w	r9, r9, #1
 8006634:	e7d8      	b.n	80065e8 <_printf_common+0x9c>
	...

08006638 <_printf_i>:
 8006638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800663c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006640:	460c      	mov	r4, r1
 8006642:	7e09      	ldrb	r1, [r1, #24]
 8006644:	b085      	sub	sp, #20
 8006646:	296e      	cmp	r1, #110	; 0x6e
 8006648:	4617      	mov	r7, r2
 800664a:	4606      	mov	r6, r0
 800664c:	4698      	mov	r8, r3
 800664e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006650:	f000 80b3 	beq.w	80067ba <_printf_i+0x182>
 8006654:	d822      	bhi.n	800669c <_printf_i+0x64>
 8006656:	2963      	cmp	r1, #99	; 0x63
 8006658:	d036      	beq.n	80066c8 <_printf_i+0x90>
 800665a:	d80a      	bhi.n	8006672 <_printf_i+0x3a>
 800665c:	2900      	cmp	r1, #0
 800665e:	f000 80b9 	beq.w	80067d4 <_printf_i+0x19c>
 8006662:	2958      	cmp	r1, #88	; 0x58
 8006664:	f000 8083 	beq.w	800676e <_printf_i+0x136>
 8006668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800666c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006670:	e032      	b.n	80066d8 <_printf_i+0xa0>
 8006672:	2964      	cmp	r1, #100	; 0x64
 8006674:	d001      	beq.n	800667a <_printf_i+0x42>
 8006676:	2969      	cmp	r1, #105	; 0x69
 8006678:	d1f6      	bne.n	8006668 <_printf_i+0x30>
 800667a:	6820      	ldr	r0, [r4, #0]
 800667c:	6813      	ldr	r3, [r2, #0]
 800667e:	0605      	lsls	r5, r0, #24
 8006680:	f103 0104 	add.w	r1, r3, #4
 8006684:	d52a      	bpl.n	80066dc <_printf_i+0xa4>
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6011      	str	r1, [r2, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	da03      	bge.n	8006696 <_printf_i+0x5e>
 800668e:	222d      	movs	r2, #45	; 0x2d
 8006690:	425b      	negs	r3, r3
 8006692:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006696:	486f      	ldr	r0, [pc, #444]	; (8006854 <_printf_i+0x21c>)
 8006698:	220a      	movs	r2, #10
 800669a:	e039      	b.n	8006710 <_printf_i+0xd8>
 800669c:	2973      	cmp	r1, #115	; 0x73
 800669e:	f000 809d 	beq.w	80067dc <_printf_i+0x1a4>
 80066a2:	d808      	bhi.n	80066b6 <_printf_i+0x7e>
 80066a4:	296f      	cmp	r1, #111	; 0x6f
 80066a6:	d020      	beq.n	80066ea <_printf_i+0xb2>
 80066a8:	2970      	cmp	r1, #112	; 0x70
 80066aa:	d1dd      	bne.n	8006668 <_printf_i+0x30>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	f043 0320 	orr.w	r3, r3, #32
 80066b2:	6023      	str	r3, [r4, #0]
 80066b4:	e003      	b.n	80066be <_printf_i+0x86>
 80066b6:	2975      	cmp	r1, #117	; 0x75
 80066b8:	d017      	beq.n	80066ea <_printf_i+0xb2>
 80066ba:	2978      	cmp	r1, #120	; 0x78
 80066bc:	d1d4      	bne.n	8006668 <_printf_i+0x30>
 80066be:	2378      	movs	r3, #120	; 0x78
 80066c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066c4:	4864      	ldr	r0, [pc, #400]	; (8006858 <_printf_i+0x220>)
 80066c6:	e055      	b.n	8006774 <_printf_i+0x13c>
 80066c8:	6813      	ldr	r3, [r2, #0]
 80066ca:	1d19      	adds	r1, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6011      	str	r1, [r2, #0]
 80066d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066d8:	2301      	movs	r3, #1
 80066da:	e08c      	b.n	80067f6 <_printf_i+0x1be>
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6011      	str	r1, [r2, #0]
 80066e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e4:	bf18      	it	ne
 80066e6:	b21b      	sxthne	r3, r3
 80066e8:	e7cf      	b.n	800668a <_printf_i+0x52>
 80066ea:	6813      	ldr	r3, [r2, #0]
 80066ec:	6825      	ldr	r5, [r4, #0]
 80066ee:	1d18      	adds	r0, r3, #4
 80066f0:	6010      	str	r0, [r2, #0]
 80066f2:	0628      	lsls	r0, r5, #24
 80066f4:	d501      	bpl.n	80066fa <_printf_i+0xc2>
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	e002      	b.n	8006700 <_printf_i+0xc8>
 80066fa:	0668      	lsls	r0, r5, #25
 80066fc:	d5fb      	bpl.n	80066f6 <_printf_i+0xbe>
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	4854      	ldr	r0, [pc, #336]	; (8006854 <_printf_i+0x21c>)
 8006702:	296f      	cmp	r1, #111	; 0x6f
 8006704:	bf14      	ite	ne
 8006706:	220a      	movne	r2, #10
 8006708:	2208      	moveq	r2, #8
 800670a:	2100      	movs	r1, #0
 800670c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006710:	6865      	ldr	r5, [r4, #4]
 8006712:	60a5      	str	r5, [r4, #8]
 8006714:	2d00      	cmp	r5, #0
 8006716:	f2c0 8095 	blt.w	8006844 <_printf_i+0x20c>
 800671a:	6821      	ldr	r1, [r4, #0]
 800671c:	f021 0104 	bic.w	r1, r1, #4
 8006720:	6021      	str	r1, [r4, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d13d      	bne.n	80067a2 <_printf_i+0x16a>
 8006726:	2d00      	cmp	r5, #0
 8006728:	f040 808e 	bne.w	8006848 <_printf_i+0x210>
 800672c:	4665      	mov	r5, ip
 800672e:	2a08      	cmp	r2, #8
 8006730:	d10b      	bne.n	800674a <_printf_i+0x112>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	07db      	lsls	r3, r3, #31
 8006736:	d508      	bpl.n	800674a <_printf_i+0x112>
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	6862      	ldr	r2, [r4, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	bfde      	ittt	le
 8006740:	2330      	movle	r3, #48	; 0x30
 8006742:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006746:	f105 35ff 	addle.w	r5, r5, #4294967295
 800674a:	ebac 0305 	sub.w	r3, ip, r5
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	f8cd 8000 	str.w	r8, [sp]
 8006754:	463b      	mov	r3, r7
 8006756:	aa03      	add	r2, sp, #12
 8006758:	4621      	mov	r1, r4
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff fef6 	bl	800654c <_printf_common>
 8006760:	3001      	adds	r0, #1
 8006762:	d14d      	bne.n	8006800 <_printf_i+0x1c8>
 8006764:	f04f 30ff 	mov.w	r0, #4294967295
 8006768:	b005      	add	sp, #20
 800676a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800676e:	4839      	ldr	r0, [pc, #228]	; (8006854 <_printf_i+0x21c>)
 8006770:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006774:	6813      	ldr	r3, [r2, #0]
 8006776:	6821      	ldr	r1, [r4, #0]
 8006778:	1d1d      	adds	r5, r3, #4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6015      	str	r5, [r2, #0]
 800677e:	060a      	lsls	r2, r1, #24
 8006780:	d50b      	bpl.n	800679a <_printf_i+0x162>
 8006782:	07ca      	lsls	r2, r1, #31
 8006784:	bf44      	itt	mi
 8006786:	f041 0120 	orrmi.w	r1, r1, #32
 800678a:	6021      	strmi	r1, [r4, #0]
 800678c:	b91b      	cbnz	r3, 8006796 <_printf_i+0x15e>
 800678e:	6822      	ldr	r2, [r4, #0]
 8006790:	f022 0220 	bic.w	r2, r2, #32
 8006794:	6022      	str	r2, [r4, #0]
 8006796:	2210      	movs	r2, #16
 8006798:	e7b7      	b.n	800670a <_printf_i+0xd2>
 800679a:	064d      	lsls	r5, r1, #25
 800679c:	bf48      	it	mi
 800679e:	b29b      	uxthmi	r3, r3
 80067a0:	e7ef      	b.n	8006782 <_printf_i+0x14a>
 80067a2:	4665      	mov	r5, ip
 80067a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80067a8:	fb02 3311 	mls	r3, r2, r1, r3
 80067ac:	5cc3      	ldrb	r3, [r0, r3]
 80067ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80067b2:	460b      	mov	r3, r1
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d1f5      	bne.n	80067a4 <_printf_i+0x16c>
 80067b8:	e7b9      	b.n	800672e <_printf_i+0xf6>
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	6825      	ldr	r5, [r4, #0]
 80067be:	6961      	ldr	r1, [r4, #20]
 80067c0:	1d18      	adds	r0, r3, #4
 80067c2:	6010      	str	r0, [r2, #0]
 80067c4:	0628      	lsls	r0, r5, #24
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	d501      	bpl.n	80067ce <_printf_i+0x196>
 80067ca:	6019      	str	r1, [r3, #0]
 80067cc:	e002      	b.n	80067d4 <_printf_i+0x19c>
 80067ce:	066a      	lsls	r2, r5, #25
 80067d0:	d5fb      	bpl.n	80067ca <_printf_i+0x192>
 80067d2:	8019      	strh	r1, [r3, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	4665      	mov	r5, ip
 80067da:	e7b9      	b.n	8006750 <_printf_i+0x118>
 80067dc:	6813      	ldr	r3, [r2, #0]
 80067de:	1d19      	adds	r1, r3, #4
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	681d      	ldr	r5, [r3, #0]
 80067e4:	6862      	ldr	r2, [r4, #4]
 80067e6:	2100      	movs	r1, #0
 80067e8:	4628      	mov	r0, r5
 80067ea:	f7f9 fd79 	bl	80002e0 <memchr>
 80067ee:	b108      	cbz	r0, 80067f4 <_printf_i+0x1bc>
 80067f0:	1b40      	subs	r0, r0, r5
 80067f2:	6060      	str	r0, [r4, #4]
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	6123      	str	r3, [r4, #16]
 80067f8:	2300      	movs	r3, #0
 80067fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067fe:	e7a7      	b.n	8006750 <_printf_i+0x118>
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	462a      	mov	r2, r5
 8006804:	4639      	mov	r1, r7
 8006806:	4630      	mov	r0, r6
 8006808:	47c0      	blx	r8
 800680a:	3001      	adds	r0, #1
 800680c:	d0aa      	beq.n	8006764 <_printf_i+0x12c>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	079b      	lsls	r3, r3, #30
 8006812:	d413      	bmi.n	800683c <_printf_i+0x204>
 8006814:	68e0      	ldr	r0, [r4, #12]
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	4298      	cmp	r0, r3
 800681a:	bfb8      	it	lt
 800681c:	4618      	movlt	r0, r3
 800681e:	e7a3      	b.n	8006768 <_printf_i+0x130>
 8006820:	2301      	movs	r3, #1
 8006822:	464a      	mov	r2, r9
 8006824:	4639      	mov	r1, r7
 8006826:	4630      	mov	r0, r6
 8006828:	47c0      	blx	r8
 800682a:	3001      	adds	r0, #1
 800682c:	d09a      	beq.n	8006764 <_printf_i+0x12c>
 800682e:	3501      	adds	r5, #1
 8006830:	68e3      	ldr	r3, [r4, #12]
 8006832:	9a03      	ldr	r2, [sp, #12]
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	42ab      	cmp	r3, r5
 8006838:	dcf2      	bgt.n	8006820 <_printf_i+0x1e8>
 800683a:	e7eb      	b.n	8006814 <_printf_i+0x1dc>
 800683c:	2500      	movs	r5, #0
 800683e:	f104 0919 	add.w	r9, r4, #25
 8006842:	e7f5      	b.n	8006830 <_printf_i+0x1f8>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1ac      	bne.n	80067a2 <_printf_i+0x16a>
 8006848:	7803      	ldrb	r3, [r0, #0]
 800684a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800684e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006852:	e76c      	b.n	800672e <_printf_i+0xf6>
 8006854:	08006ad1 	.word	0x08006ad1
 8006858:	08006ae2 	.word	0x08006ae2

0800685c <_sbrk_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4c06      	ldr	r4, [pc, #24]	; (8006878 <_sbrk_r+0x1c>)
 8006860:	2300      	movs	r3, #0
 8006862:	4605      	mov	r5, r0
 8006864:	4608      	mov	r0, r1
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	f7fa f9cc 	bl	8000c04 <_sbrk>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_sbrk_r+0x1a>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	b103      	cbz	r3, 8006876 <_sbrk_r+0x1a>
 8006874:	602b      	str	r3, [r5, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	24000180 	.word	0x24000180

0800687c <__sread>:
 800687c:	b510      	push	{r4, lr}
 800687e:	460c      	mov	r4, r1
 8006880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006884:	f000 f896 	bl	80069b4 <_read_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	bfab      	itete	ge
 800688c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800688e:	89a3      	ldrhlt	r3, [r4, #12]
 8006890:	181b      	addge	r3, r3, r0
 8006892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006896:	bfac      	ite	ge
 8006898:	6563      	strge	r3, [r4, #84]	; 0x54
 800689a:	81a3      	strhlt	r3, [r4, #12]
 800689c:	bd10      	pop	{r4, pc}

0800689e <__swrite>:
 800689e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a2:	461f      	mov	r7, r3
 80068a4:	898b      	ldrh	r3, [r1, #12]
 80068a6:	05db      	lsls	r3, r3, #23
 80068a8:	4605      	mov	r5, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	4616      	mov	r6, r2
 80068ae:	d505      	bpl.n	80068bc <__swrite+0x1e>
 80068b0:	2302      	movs	r3, #2
 80068b2:	2200      	movs	r2, #0
 80068b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b8:	f000 f868 	bl	800698c <_lseek_r>
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068c6:	81a3      	strh	r3, [r4, #12]
 80068c8:	4632      	mov	r2, r6
 80068ca:	463b      	mov	r3, r7
 80068cc:	4628      	mov	r0, r5
 80068ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068d2:	f000 b817 	b.w	8006904 <_write_r>

080068d6 <__sseek>:
 80068d6:	b510      	push	{r4, lr}
 80068d8:	460c      	mov	r4, r1
 80068da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068de:	f000 f855 	bl	800698c <_lseek_r>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	bf15      	itete	ne
 80068e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80068ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068f2:	81a3      	strheq	r3, [r4, #12]
 80068f4:	bf18      	it	ne
 80068f6:	81a3      	strhne	r3, [r4, #12]
 80068f8:	bd10      	pop	{r4, pc}

080068fa <__sclose>:
 80068fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fe:	f000 b813 	b.w	8006928 <_close_r>
	...

08006904 <_write_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4c07      	ldr	r4, [pc, #28]	; (8006924 <_write_r+0x20>)
 8006908:	4605      	mov	r5, r0
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	2200      	movs	r2, #0
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f7fa f925 	bl	8000b62 <_write>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_write_r+0x1e>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	b103      	cbz	r3, 8006922 <_write_r+0x1e>
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	24000180 	.word	0x24000180

08006928 <_close_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4c06      	ldr	r4, [pc, #24]	; (8006944 <_close_r+0x1c>)
 800692c:	2300      	movs	r3, #0
 800692e:	4605      	mov	r5, r0
 8006930:	4608      	mov	r0, r1
 8006932:	6023      	str	r3, [r4, #0]
 8006934:	f7fa f931 	bl	8000b9a <_close>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d102      	bne.n	8006942 <_close_r+0x1a>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	b103      	cbz	r3, 8006942 <_close_r+0x1a>
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	24000180 	.word	0x24000180

08006948 <_fstat_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4c07      	ldr	r4, [pc, #28]	; (8006968 <_fstat_r+0x20>)
 800694c:	2300      	movs	r3, #0
 800694e:	4605      	mov	r5, r0
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	f7fa f92c 	bl	8000bb2 <_fstat>
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	d102      	bne.n	8006964 <_fstat_r+0x1c>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	b103      	cbz	r3, 8006964 <_fstat_r+0x1c>
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	bd38      	pop	{r3, r4, r5, pc}
 8006966:	bf00      	nop
 8006968:	24000180 	.word	0x24000180

0800696c <_isatty_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4c06      	ldr	r4, [pc, #24]	; (8006988 <_isatty_r+0x1c>)
 8006970:	2300      	movs	r3, #0
 8006972:	4605      	mov	r5, r0
 8006974:	4608      	mov	r0, r1
 8006976:	6023      	str	r3, [r4, #0]
 8006978:	f7fa f92b 	bl	8000bd2 <_isatty>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_isatty_r+0x1a>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	b103      	cbz	r3, 8006986 <_isatty_r+0x1a>
 8006984:	602b      	str	r3, [r5, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	24000180 	.word	0x24000180

0800698c <_lseek_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4c07      	ldr	r4, [pc, #28]	; (80069ac <_lseek_r+0x20>)
 8006990:	4605      	mov	r5, r0
 8006992:	4608      	mov	r0, r1
 8006994:	4611      	mov	r1, r2
 8006996:	2200      	movs	r2, #0
 8006998:	6022      	str	r2, [r4, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fa f924 	bl	8000be8 <_lseek>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_lseek_r+0x1e>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_lseek_r+0x1e>
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	24000180 	.word	0x24000180

080069b0 <__malloc_lock>:
 80069b0:	4770      	bx	lr

080069b2 <__malloc_unlock>:
 80069b2:	4770      	bx	lr

080069b4 <_read_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4c07      	ldr	r4, [pc, #28]	; (80069d4 <_read_r+0x20>)
 80069b8:	4605      	mov	r5, r0
 80069ba:	4608      	mov	r0, r1
 80069bc:	4611      	mov	r1, r2
 80069be:	2200      	movs	r2, #0
 80069c0:	6022      	str	r2, [r4, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f7fa f8b0 	bl	8000b28 <_read>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_read_r+0x1e>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_read_r+0x1e>
 80069d0:	602b      	str	r3, [r5, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	24000180 	.word	0x24000180

080069d8 <_init>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	bf00      	nop
 80069dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069de:	bc08      	pop	{r3}
 80069e0:	469e      	mov	lr, r3
 80069e2:	4770      	bx	lr

080069e4 <_fini>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	bf00      	nop
 80069e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ea:	bc08      	pop	{r3}
 80069ec:	469e      	mov	lr, r3
 80069ee:	4770      	bx	lr
